services:
  # Ensure Superset DB exists
  superset-db-init:
    image: postgres:16
    profiles: ["superset"]
    command: >-
      bash -lc "
      until pg_isready -h postgres -U ${POSTGRES_USER:-it_user}; do sleep 1; done;
      PGPASSWORD=${POSTGRES_PASSWORD:-it_pass} psql -h postgres -U ${POSTGRES_USER:-it_user} -tc \"SELECT 1 FROM pg_database WHERE datname='superset'\" | grep -q 1 || \
      PGPASSWORD=${POSTGRES_PASSWORD:-it_pass} psql -h postgres -U ${POSTGRES_USER:-it_user} -c 'CREATE DATABASE superset;'
      "
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  # Initialize Superset (admin user, db upgrade, init)
  superset-init:
    image: apache/superset:latest
    profiles: ["superset"]
    environment:
      - SUPERSET_SECRET_KEY=${SUPERSET_SECRET_KEY:-this_is_not_secure}
      - SUPERSET_LOAD_EXAMPLES=${SUPERSET_LOAD_EXAMPLES:-no}
      - SUPERSET_ADMIN_USERNAME=${SUPERSET_ADMIN_USERNAME:-admin}
      - SUPERSET_ADMIN_PASSWORD=${SUPERSET_ADMIN_PASSWORD:-adminadmin}
      - SUPERSET_ADMIN_FIRSTNAME=${SUPERSET_ADMIN_FIRSTNAME:-Admin}
      - SUPERSET_ADMIN_LASTNAME=${SUPERSET_ADMIN_LASTNAME:-User}
      - SUPERSET_ADMIN_EMAIL=${SUPERSET_ADMIN_EMAIL:-admin@example.com}
      - SUPERSET_DATABASE_URI=postgresql+psycopg2://${POSTGRES_USER:-it_user}:${POSTGRES_PASSWORD:-it_pass}@postgres:5432/superset
    command: >-
      bash -lc "
      superset db upgrade && \
      superset fab create-admin \
        --username \"$SUPERSET_ADMIN_USERNAME\" \
        --password \"$SUPERSET_ADMIN_PASSWORD\" \
        --firstname \"$SUPERSET_ADMIN_FIRSTNAME\" \
        --lastname \"$SUPERSET_ADMIN_LASTNAME\" \
        --email \"$SUPERSET_ADMIN_EMAIL\" || true && \
      superset init
      "
    depends_on:
      superset-db-init:
        condition: service_completed_successfully
    restart: "no"

  # Reconfigure Superset service (add env/depends_on)
  superset:
    profiles: ["superset"]
    environment:
      - SUPERSET_SECRET_KEY=${SUPERSET_SECRET_KEY:-this_is_not_secure}
      - SUPERSET_LOAD_EXAMPLES=${SUPERSET_LOAD_EXAMPLES:-no}
      - SUPERSET_DATABASE_URI=postgresql+psycopg2://${POSTGRES_USER:-it_user}:${POSTGRES_PASSWORD:-it_pass}@postgres:5432/superset
    depends_on:
      superset-init:
        condition: service_completed_successfully

  # Ensure Airflow DB exists
  airflow-db-init:
    image: postgres:16
    profiles: ["airflow"]
    command: >-
      bash -lc "
      until pg_isready -h postgres -U ${POSTGRES_USER:-it_user}; do sleep 1; done;
      PGPASSWORD=${POSTGRES_PASSWORD:-it_pass} psql -h postgres -U ${POSTGRES_USER:-it_user} -tc \"SELECT 1 FROM pg_database WHERE datname='airflow'\" | grep -q 1 || \
      PGPASSWORD=${POSTGRES_PASSWORD:-it_pass} psql -h postgres -U ${POSTGRES_USER:-it_user} -c 'CREATE DATABASE airflow;'
      "
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  # Initialize Airflow metadata DB and admin user
  airflow-init:
    image: apache/airflow:2
    profiles: ["airflow"]
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER:-it_user}:${POSTGRES_PASSWORD:-it_pass}@postgres:5432/airflow
      - AIRFLOW__WEBSERVER__RBAC=true
      - _AIRFLOW_WWW_USER_USERNAME=${AIRFLOW_ADMIN_USERNAME:-admin}
      - _AIRFLOW_WWW_USER_PASSWORD=${AIRFLOW_ADMIN_PASSWORD:-adminadmin}
      - _AIRFLOW_WWW_USER_FIRSTNAME=${AIRFLOW_ADMIN_FIRSTNAME:-Admin}
      - _AIRFLOW_WWW_USER_LASTNAME=${AIRFLOW_ADMIN_LASTNAME:-User}
      - _AIRFLOW_WWW_USER_EMAIL=${AIRFLOW_ADMIN_EMAIL:-admin@example.com}
    volumes:
      - ./etl/airflow/dags:/opt/airflow/dags:ro
    user: "0:0"
    command: >-
      bash -lc "
      airflow db upgrade && \
      airflow users create \
        --username \"$_AIRFLOW_WWW_USER_USERNAME\" \
        --password \"$_AIRFLOW_WWW_USER_PASSWORD\" \
        --firstname \"$_AIRFLOW_WWW_USER_FIRSTNAME\" \
        --lastname \"$_AIRFLOW_WWW_USER_LASTNAME\" \
        --role Admin \
        --email \"$_AIRFLOW_WWW_USER_EMAIL\" || true
      "
    depends_on:
      airflow-db-init:
        condition: service_completed_successfully
    restart: "no"

  # Reconfigure Airflow webserver and add scheduler companion
  airflow:
    profiles: ["airflow"]
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER:-it_user}:${POSTGRES_PASSWORD:-it_pass}@postgres:5432/airflow
      - AIRFLOW__WEBSERVER__RBAC=true
    command: webserver
    volumes:
      - ./etl/airflow/dags:/opt/airflow/dags:ro
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    image: apache/airflow:2
    profiles: ["airflow"]
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER:-it_user}:${POSTGRES_PASSWORD:-it_pass}@postgres:5432/airflow
    command: scheduler
    volumes:
      - ./etl/airflow/dags:/opt/airflow/dags:ro
    depends_on:
      airflow-init:
        condition: service_completed_successfully
