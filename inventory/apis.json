{
  "generated_at": "2025-09-24T05:02:58Z",
  "services": {
    "_shared": [
      {
        "lineno": 152,
        "method": "GET",
        "path": "/health",
        "response_model": null,
        "source": "services/_shared/service_template.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /healthz instead."
      },
      {
        "lineno": 89,
        "method": "GET",
        "path": "/healthz",
        "response_model": "None",
        "source": "services/_shared/service_template.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health check endpoint (liveness probe)."
      },
      {
        "lineno": 37,
        "method": "GET",
        "path": "/healthz",
        "response_model": "HealthResponse",
        "source": "services/_shared/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health Check"
      },
      {
        "lineno": 111,
        "method": "GET",
        "path": "/info",
        "response_model": "None",
        "source": "services/_shared/service_template.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information endpoint."
      },
      {
        "lineno": 75,
        "method": "GET",
        "path": "/info",
        "response_model": "Dict[str, Any]",
        "source": "services/_shared/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service Information"
      },
      {
        "lineno": 100,
        "method": "GET",
        "path": "/readyz",
        "response_model": "None",
        "source": "services/_shared/service_template.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness check endpoint (readiness probe)."
      },
      {
        "lineno": 56,
        "method": "GET",
        "path": "/readyz",
        "response_model": "ReadyResponse",
        "source": "services/_shared/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness Check"
      }
    ],
    "agent-connector": [
      {
        "lineno": 151,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/agent-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /healthz instead."
      },
      {
        "lineno": 11,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/agent-connector/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 37,
        "method": "GET",
        "path": "/healthz",
        "response_model": "HealthResponse",
        "source": "services/agent-connector/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health Check"
      },
      {
        "lineno": 77,
        "method": "GET",
        "path": "/info",
        "response_model": "Dict[str, Any]",
        "source": "services/agent-connector/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service Information"
      },
      {
        "lineno": 654,
        "method": "POST",
        "path": "/invoke/{plugin_name}/{tool_name}",
        "response_model": "PluginInvokeResponse",
        "source": "services/agent-connector/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Invoke Plugin Tool"
      },
      {
        "lineno": 227,
        "method": "POST",
        "path": "/plugins/invoke/{plugin}/{tool}",
        "response_model": null,
        "source": "services/agent-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/plugins/invoke/{plugin}/{tool} instead."
      },
      {
        "lineno": 64,
        "method": "POST",
        "path": "/plugins/invoke/{plugin}/{tool}",
        "response_model": null,
        "source": "services/agent-connector/plugins/loader.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 176,
        "method": "GET",
        "path": "/plugins/registry",
        "response_model": null,
        "source": "services/agent-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/plugins/registry instead."
      },
      {
        "lineno": 28,
        "method": "GET",
        "path": "/plugins/registry",
        "response_model": null,
        "source": "services/agent-connector/plugins/api.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 193,
        "method": "GET",
        "path": "/plugins/state",
        "response_model": null,
        "source": "services/agent-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/plugins/state instead."
      },
      {
        "lineno": 33,
        "method": "GET",
        "path": "/plugins/state",
        "response_model": null,
        "source": "services/agent-connector/plugins/api.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 210,
        "method": "GET",
        "path": "/plugins/tools",
        "response_model": null,
        "source": "services/agent-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/plugins/tools instead."
      },
      {
        "lineno": 54,
        "method": "GET",
        "path": "/plugins/tools",
        "response_model": null,
        "source": "services/agent-connector/plugins/loader.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 71,
        "method": "GET",
        "path": "/plugins/{name}/config",
        "response_model": null,
        "source": "services/agent-connector/plugins/api.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 80,
        "method": "POST",
        "path": "/plugins/{name}/config",
        "response_model": null,
        "source": "services/agent-connector/plugins/api.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 53,
        "method": "POST",
        "path": "/plugins/{name}/enable",
        "response_model": null,
        "source": "services/agent-connector/plugins/api.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 95,
        "method": "GET",
        "path": "/plugins/{name}/health",
        "response_model": null,
        "source": "services/agent-connector/plugins/api.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 163,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/agent-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /readyz instead."
      },
      {
        "lineno": 16,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/agent-connector/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 57,
        "method": "GET",
        "path": "/readyz",
        "response_model": "ReadyResponse",
        "source": "services/agent-connector/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness Check"
      },
      {
        "lineno": 176,
        "method": "GET",
        "path": "/registry",
        "response_model": "PaginatedResponse[PluginRegistryItem]",
        "source": "services/agent-connector/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List Plugin Registry"
      },
      {
        "lineno": 223,
        "method": "GET",
        "path": "/registry/summary",
        "response_model": "PluginRegistryResponse",
        "source": "services/agent-connector/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Plugin Registry Summary"
      },
      {
        "lineno": 265,
        "method": "GET",
        "path": "/state",
        "response_model": "PaginatedResponse[PluginStateItem]",
        "source": "services/agent-connector/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List Plugin States"
      },
      {
        "lineno": 572,
        "method": "GET",
        "path": "/tools",
        "response_model": "PluginToolsResponse",
        "source": "services/agent-connector/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Discover Available Tools"
      },
      {
        "lineno": 445,
        "method": "GET",
        "path": "/{plugin_name}/config",
        "response_model": "PluginConfigResponse",
        "source": "services/agent-connector/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Plugin Configuration"
      },
      {
        "lineno": 486,
        "method": "POST",
        "path": "/{plugin_name}/config",
        "response_model": "PluginConfigResponse",
        "source": "services/agent-connector/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Set Plugin Configuration"
      },
      {
        "lineno": 352,
        "method": "POST",
        "path": "/{plugin_name}/enable",
        "response_model": "PluginToggleResponse",
        "source": "services/agent-connector/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Enable/Disable Plugin"
      },
      {
        "lineno": 807,
        "method": "GET",
        "path": "/{plugin_name}/health",
        "response_model": "PluginHealthResponse",
        "source": "services/agent-connector/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Check Plugin Health"
      }
    ],
    "auth-service": [
      {
        "lineno": 849,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/auth-service/src/auth_service/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and available endpoints."
      },
      {
        "lineno": 216,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/auth-service/src/auth_service/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Root endpoint with service information."
      },
      {
        "lineno": 240,
        "method": "POST",
        "path": "/auth/change-password",
        "response_model": "SuccessResponse",
        "source": "services/auth-service/src/auth_service/api/auth.py",
        "status_codes": [
          "200"
        ],
        "summary": "Change user password."
      },
      {
        "lineno": 90,
        "method": "POST",
        "path": "/auth/login",
        "response_model": "LoginResponse",
        "source": "services/auth-service/src/auth_service/api/auth.py",
        "status_codes": [
          "200"
        ],
        "summary": "Authenticate user and return access tokens."
      },
      {
        "lineno": 184,
        "method": "POST",
        "path": "/auth/logout",
        "response_model": "SuccessResponse",
        "source": "services/auth-service/src/auth_service/api/auth.py",
        "status_codes": [
          "200"
        ],
        "summary": "Logout user by invalidating session."
      },
      {
        "lineno": 210,
        "method": "GET",
        "path": "/auth/me",
        "response_model": "UserResponse",
        "source": "services/auth-service/src/auth_service/api/auth.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get current user information."
      },
      {
        "lineno": 377,
        "method": "POST",
        "path": "/auth/mfa/disable",
        "response_model": "SuccessResponse",
        "source": "services/auth-service/src/auth_service/api/auth.py",
        "status_codes": [
          "200"
        ],
        "summary": "Disable MFA after password verification."
      },
      {
        "lineno": 346,
        "method": "POST",
        "path": "/auth/mfa/enable",
        "response_model": "SuccessResponse",
        "source": "services/auth-service/src/auth_service/api/auth.py",
        "status_codes": [
          "200"
        ],
        "summary": "Enable MFA after verifying setup token."
      },
      {
        "lineno": 310,
        "method": "POST",
        "path": "/auth/mfa/setup",
        "response_model": "MFASetupResponse",
        "source": "services/auth-service/src/auth_service/api/auth.py",
        "status_codes": [
          "200"
        ],
        "summary": "Setup MFA for current user."
      },
      {
        "lineno": 150,
        "method": "POST",
        "path": "/auth/refresh",
        "response_model": "RefreshTokenResponse",
        "source": "services/auth-service/src/auth_service/api/auth.py",
        "status_codes": [
          "200"
        ],
        "summary": "Refresh access token using refresh token."
      },
      {
        "lineno": 281,
        "method": "POST",
        "path": "/auth/request-password-reset",
        "response_model": "SuccessResponse",
        "source": "services/auth-service/src/auth_service/api/auth.py",
        "status_codes": [
          "200"
        ],
        "summary": "Request password reset email."
      },
      {
        "lineno": 177,
        "method": "GET",
        "path": "/health",
        "response_model": "HealthResponse",
        "source": "services/auth-service/src/auth_service/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health check endpoint."
      },
      {
        "lineno": 120,
        "method": "GET",
        "path": "/healthz",
        "response_model": "HealthChecker.health_check().__class__",
        "source": "services/auth-service/src/auth_service/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health check endpoint (liveness probe)."
      },
      {
        "lineno": 830,
        "method": "POST",
        "path": "/login",
        "response_model": null,
        "source": "services/auth-service/src/auth_service/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/auth/login instead."
      },
      {
        "lineno": 206,
        "method": "GET",
        "path": "/metrics",
        "response_model": null,
        "source": "services/auth-service/src/auth_service/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Prometheus metrics endpoint."
      },
      {
        "lineno": 125,
        "method": "GET",
        "path": "/readyz",
        "response_model": "HealthChecker.ready_check().__class__",
        "source": "services/auth-service/src/auth_service/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness check endpoint (readiness probe)."
      },
      {
        "lineno": 40,
        "method": "GET",
        "path": "/roles",
        "response_model": "List[RoleResponse]",
        "source": "services/auth-service/src/auth_service/api/roles.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get list of all roles."
      },
      {
        "lineno": 76,
        "method": "POST",
        "path": "/roles",
        "response_model": "RoleResponse",
        "source": "services/auth-service/src/auth_service/api/roles.py",
        "status_codes": [
          "200"
        ],
        "summary": "Create a new role (admin only)."
      },
      {
        "lineno": 375,
        "method": "GET",
        "path": "/roles/permissions/",
        "response_model": "List[PermissionResponse]",
        "source": "services/auth-service/src/auth_service/api/roles.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get list of all permissions."
      },
      {
        "lineno": 400,
        "method": "GET",
        "path": "/roles/permissions/services",
        "response_model": "List[str]",
        "source": "services/auth-service/src/auth_service/api/roles.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get list of all services with permissions."
      },
      {
        "lineno": 418,
        "method": "GET",
        "path": "/roles/permissions/{permission_id}",
        "response_model": "PermissionResponse",
        "source": "services/auth-service/src/auth_service/api/roles.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get permission by ID."
      },
      {
        "lineno": 277,
        "method": "DELETE",
        "path": "/roles/{role_id}",
        "response_model": "SuccessResponse",
        "source": "services/auth-service/src/auth_service/api/roles.py",
        "status_codes": [
          "200"
        ],
        "summary": "Delete role (admin only)."
      },
      {
        "lineno": 148,
        "method": "GET",
        "path": "/roles/{role_id}",
        "response_model": "RoleResponse",
        "source": "services/auth-service/src/auth_service/api/roles.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get role by ID."
      },
      {
        "lineno": 182,
        "method": "PUT",
        "path": "/roles/{role_id}",
        "response_model": "RoleResponse",
        "source": "services/auth-service/src/auth_service/api/roles.py",
        "status_codes": [
          "200"
        ],
        "summary": "Update role information (admin only)."
      },
      {
        "lineno": 445,
        "method": "POST",
        "path": "/roles/{role_id}/permissions",
        "response_model": "SuccessResponse",
        "source": "services/auth-service/src/auth_service/api/roles.py",
        "status_codes": [
          "200"
        ],
        "summary": "Assign permissions to role (admin only)."
      },
      {
        "lineno": 512,
        "method": "DELETE",
        "path": "/roles/{role_id}/permissions/{permission_name}",
        "response_model": "SuccessResponse",
        "source": "services/auth-service/src/auth_service/api/roles.py",
        "status_codes": [
          "200"
        ],
        "summary": "Remove permission from role (admin only)."
      },
      {
        "lineno": 335,
        "method": "GET",
        "path": "/roles/{role_id}/users",
        "response_model": "List[Dict[str, Any]]",
        "source": "services/auth-service/src/auth_service/api/roles.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get users assigned to a specific role (admin only)."
      },
      {
        "lineno": 62,
        "method": "GET",
        "path": "/users",
        "response_model": "UserListResponse",
        "source": "services/auth-service/src/auth_service/api/users.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get paginated list of users with filtering."
      },
      {
        "lineno": 128,
        "method": "POST",
        "path": "/users",
        "response_model": "UserResponse",
        "source": "services/auth-service/src/auth_service/api/users.py",
        "status_codes": [
          "200"
        ],
        "summary": "Create a new user account."
      },
      {
        "lineno": 720,
        "method": "GET",
        "path": "/users/stats",
        "response_model": "UserStatsResponse",
        "source": "services/auth-service/src/auth_service/api/users.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get user statistics (admin only)."
      },
      {
        "lineno": 277,
        "method": "DELETE",
        "path": "/users/{user_id}",
        "response_model": "SuccessResponse",
        "source": "services/auth-service/src/auth_service/api/users.py",
        "status_codes": [
          "200"
        ],
        "summary": "Delete user account (admin only)."
      },
      {
        "lineno": 181,
        "method": "GET",
        "path": "/users/{user_id}",
        "response_model": "UserResponse",
        "source": "services/auth-service/src/auth_service/api/users.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get user by ID."
      },
      {
        "lineno": 222,
        "method": "PUT",
        "path": "/users/{user_id}",
        "response_model": "UserResponse",
        "source": "services/auth-service/src/auth_service/api/users.py",
        "status_codes": [
          "200"
        ],
        "summary": "Update user information."
      },
      {
        "lineno": 331,
        "method": "POST",
        "path": "/users/{user_id}/activate",
        "response_model": "SuccessResponse",
        "source": "services/auth-service/src/auth_service/api/users.py",
        "status_codes": [
          "200"
        ],
        "summary": "Activate user account (admin only)."
      },
      {
        "lineno": 583,
        "method": "GET",
        "path": "/users/{user_id}/api-keys",
        "response_model": "List[ApiKeyResponse]",
        "source": "services/auth-service/src/auth_service/api/users.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get user's API keys."
      },
      {
        "lineno": 613,
        "method": "POST",
        "path": "/users/{user_id}/api-keys",
        "response_model": "ApiKeyCreateResponse",
        "source": "services/auth-service/src/auth_service/api/users.py",
        "status_codes": [
          "200"
        ],
        "summary": "Create API key for user."
      },
      {
        "lineno": 678,
        "method": "DELETE",
        "path": "/users/{user_id}/api-keys/{key_id}",
        "response_model": "SuccessResponse",
        "source": "services/auth-service/src/auth_service/api/users.py",
        "status_codes": [
          "200"
        ],
        "summary": "Revoke API key."
      },
      {
        "lineno": 438,
        "method": "POST",
        "path": "/users/{user_id}/assign-roles",
        "response_model": "SuccessResponse",
        "source": "services/auth-service/src/auth_service/api/users.py",
        "status_codes": [
          "200"
        ],
        "summary": "Assign roles to user (admin only)."
      },
      {
        "lineno": 764,
        "method": "GET",
        "path": "/users/{user_id}/audit",
        "response_model": "AuditLogListResponse",
        "source": "services/auth-service/src/auth_service/api/users.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get user audit logs (admin only)."
      },
      {
        "lineno": 378,
        "method": "POST",
        "path": "/users/{user_id}/deactivate",
        "response_model": "SuccessResponse",
        "source": "services/auth-service/src/auth_service/api/users.py",
        "status_codes": [
          "200"
        ],
        "summary": "Deactivate user account (admin only)."
      },
      {
        "lineno": 496,
        "method": "GET",
        "path": "/users/{user_id}/sessions",
        "response_model": "SessionListResponse",
        "source": "services/auth-service/src/auth_service/api/users.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get user's active sessions."
      },
      {
        "lineno": 537,
        "method": "DELETE",
        "path": "/users/{user_id}/sessions/{session_id}",
        "response_model": "SuccessResponse",
        "source": "services/auth-service/src/auth_service/api/users.py",
        "status_codes": [
          "200"
        ],
        "summary": "Revoke a specific user session."
      },
      {
        "lineno": 625,
        "method": "POST",
        "path": "/v1/auth/change-password",
        "response_model": null,
        "source": "services/auth-service/src/auth_service/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Change password"
      },
      {
        "lineno": 432,
        "method": "POST",
        "path": "/v1/auth/login",
        "response_model": "LoginResponse",
        "source": "services/auth-service/src/auth_service/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "User login"
      },
      {
        "lineno": 527,
        "method": "POST",
        "path": "/v1/auth/logout",
        "response_model": null,
        "source": "services/auth-service/src/auth_service/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "User logout"
      },
      {
        "lineno": 549,
        "method": "GET",
        "path": "/v1/auth/me",
        "response_model": "UserResponse",
        "source": "services/auth-service/src/auth_service/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get current user"
      },
      {
        "lineno": 364,
        "method": "POST",
        "path": "/v1/auth/register",
        "response_model": "UserResponse",
        "source": "services/auth-service/src/auth_service/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Register new user"
      },
      {
        "lineno": 595,
        "method": "POST",
        "path": "/v1/auth/verify-token",
        "response_model": "TokenResponse",
        "source": "services/auth-service/src/auth_service/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Verify token"
      },
      {
        "lineno": 793,
        "method": "GET",
        "path": "/v1/roles",
        "response_model": "List[RoleModel]",
        "source": "services/auth-service/src/auth_service/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List roles"
      },
      {
        "lineno": 671,
        "method": "GET",
        "path": "/v1/users",
        "response_model": "PaginatedResponse[UserResponse]",
        "source": "services/auth-service/src/auth_service/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List users"
      },
      {
        "lineno": 738,
        "method": "GET",
        "path": "/v1/users/{user_id}",
        "response_model": "UserResponse",
        "source": "services/auth-service/src/auth_service/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get user"
      }
    ],
    "cache-manager": [
      {
        "lineno": 670,
        "method": "POST",
        "path": "/cache",
        "response_model": null,
        "source": "services/cache-manager/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Manually set cache item"
      },
      {
        "lineno": 92,
        "method": "POST",
        "path": "/cache",
        "response_model": null,
        "source": "services/cache-manager/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/cache instead"
      },
      {
        "lineno": 61,
        "method": "POST",
        "path": "/cache",
        "response_model": "CacheResponse",
        "source": "services/cache-manager/routers/cache_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Store an item in the cache with intelligent placement and compression."
      },
      {
        "lineno": 398,
        "method": "GET",
        "path": "/cache/analytics",
        "response_model": "CacheAnalytics",
        "source": "services/cache-manager/routers/cache_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get cache usage analytics and optimization recommendations."
      },
      {
        "lineno": 502,
        "method": "POST",
        "path": "/cache/backup",
        "response_model": "CacheBackupResponse",
        "source": "services/cache-manager/routers/cache_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Create a backup of cache data for disaster recovery."
      },
      {
        "lineno": 158,
        "method": "POST",
        "path": "/cache/bulk",
        "response_model": "BulkCacheResponse",
        "source": "services/cache-manager/routers/cache_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Cache multiple items in a single operation for efficiency."
      },
      {
        "lineno": 645,
        "method": "POST",
        "path": "/cache/flush",
        "response_model": null,
        "source": "services/cache-manager/routers/cache_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Flush all cache levels completely."
      },
      {
        "lineno": 350,
        "method": "GET",
        "path": "/cache/health",
        "response_model": "CacheHealthStatus",
        "source": "services/cache-manager/routers/cache_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get comprehensive cache manager health status."
      },
      {
        "lineno": 714,
        "method": "POST",
        "path": "/cache/invalidate",
        "response_model": null,
        "source": "services/cache-manager/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Invalidate cache items by tags or pattern"
      },
      {
        "lineno": 128,
        "method": "POST",
        "path": "/cache/invalidate",
        "response_model": null,
        "source": "services/cache-manager/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/cache/invalidate instead"
      },
      {
        "lineno": 208,
        "method": "POST",
        "path": "/cache/invalidate",
        "response_model": "InvalidateResponse",
        "source": "services/cache-manager/routers/cache_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Invalidate cache items by tags or pattern matching."
      },
      {
        "lineno": 460,
        "method": "POST",
        "path": "/cache/key/generate",
        "response_model": "CacheKeyResponse",
        "source": "services/cache-manager/routers/cache_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Generate a consistent cache key from request components."
      },
      {
        "lineno": 570,
        "method": "POST",
        "path": "/cache/restore",
        "response_model": "CacheRestoreResponse",
        "source": "services/cache-manager/routers/cache_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Restore cache data from a backup."
      },
      {
        "lineno": 733,
        "method": "GET",
        "path": "/cache/stats",
        "response_model": null,
        "source": "services/cache-manager/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get cache performance statistics"
      },
      {
        "lineno": 152,
        "method": "GET",
        "path": "/cache/stats",
        "response_model": null,
        "source": "services/cache-manager/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/cache/stats instead"
      },
      {
        "lineno": 263,
        "method": "GET",
        "path": "/cache/stats",
        "response_model": "DetailedCacheStats",
        "source": "services/cache-manager/routers/cache_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get comprehensive cache performance statistics and analytics."
      },
      {
        "lineno": 727,
        "method": "POST",
        "path": "/cache/warm",
        "response_model": null,
        "source": "services/cache-manager/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Warm cache with specified patterns"
      },
      {
        "lineno": 140,
        "method": "POST",
        "path": "/cache/warm",
        "response_model": null,
        "source": "services/cache-manager/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/cache/warm instead"
      },
      {
        "lineno": 243,
        "method": "POST",
        "path": "/cache/warm",
        "response_model": "WarmCacheResponse",
        "source": "services/cache-manager/routers/cache_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Proactively warm cache with frequently accessed data."
      },
      {
        "lineno": 708,
        "method": "DELETE",
        "path": "/cache/{key}",
        "response_model": null,
        "source": "services/cache-manager/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Delete cache item"
      },
      {
        "lineno": 116,
        "method": "DELETE",
        "path": "/cache/{key}",
        "response_model": null,
        "source": "services/cache-manager/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/cache/{key} instead"
      },
      {
        "lineno": 138,
        "method": "DELETE",
        "path": "/cache/{key}",
        "response_model": "CacheResponse",
        "source": "services/cache-manager/routers/cache_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Delete an item from all cache levels."
      },
      {
        "lineno": 683,
        "method": "GET",
        "path": "/cache/{key}",
        "response_model": null,
        "source": "services/cache-manager/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get cache item by key"
      },
      {
        "lineno": 104,
        "method": "GET",
        "path": "/cache/{key}",
        "response_model": null,
        "source": "services/cache-manager/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/cache/{key} instead"
      },
      {
        "lineno": 96,
        "method": "GET",
        "path": "/cache/{key}",
        "response_model": "CacheItemResponse",
        "source": "services/cache-manager/routers/cache_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Retrieve an item from cache with multi-level lookup."
      },
      {
        "lineno": 739,
        "method": "GET",
        "path": "/health",
        "response_model": null,
        "source": "services/cache-manager/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health check endpoint"
      },
      {
        "lineno": 164,
        "method": "GET",
        "path": "/health",
        "response_model": null,
        "source": "services/cache-manager/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /healthz instead"
      },
      {
        "lineno": 13,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/cache-manager/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Liveness probe - returns OK if service is running."
      },
      {
        "lineno": 85,
        "method": "GET",
        "path": "/info",
        "response_model": null,
        "source": "services/cache-manager/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and capabilities."
      },
      {
        "lineno": 19,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/cache-manager/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness probe - checks if service can handle requests."
      }
    ],
    "collab-hub": [
      {
        "lineno": 187,
        "method": "POST",
        "path": "/audit",
        "response_model": null,
        "source": "services/collab-hub/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - activities are now automatically logged"
      },
      {
        "lineno": 388,
        "method": "POST",
        "path": "/audit",
        "response_model": null,
        "source": "services/collab-hub/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 362,
        "method": "POST",
        "path": "/collab/notes",
        "response_model": null,
        "source": "services/collab-hub/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 381,
        "method": "GET",
        "path": "/collab/notes/{case_id}",
        "response_model": null,
        "source": "services/collab-hub/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 584,
        "method": "GET",
        "path": "/comments",
        "response_model": "PaginatedResponse[Comment]",
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List comments with filtering and pagination."
      },
      {
        "lineno": 616,
        "method": "POST",
        "path": "/comments",
        "response_model": "Comment",
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Create new comment with mention support."
      },
      {
        "lineno": 706,
        "method": "DELETE",
        "path": "/comments/{comment_id}",
        "response_model": null,
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Delete comment with permission checking."
      },
      {
        "lineno": 661,
        "method": "PUT",
        "path": "/comments/{comment_id}",
        "response_model": "Comment",
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Update comment content with edit tracking."
      },
      {
        "lineno": 284,
        "method": "POST",
        "path": "/dossier/export",
        "response_model": null,
        "source": "services/collab-hub/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 892,
        "method": "GET",
        "path": "/health",
        "response_model": "HealthStatus",
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get collaboration hub health status."
      },
      {
        "lineno": 103,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/collab-hub/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /healthz (no prefix) instead"
      },
      {
        "lineno": 13,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/collab-hub/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Liveness probe - returns OK if service is running."
      },
      {
        "lineno": 112,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/collab-hub/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 84,
        "method": "GET",
        "path": "/info",
        "response_model": null,
        "source": "services/collab-hub/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and capabilities."
      },
      {
        "lineno": 175,
        "method": "GET",
        "path": "/labels",
        "response_model": null,
        "source": "services/collab-hub/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/labels instead"
      },
      {
        "lineno": 925,
        "method": "GET",
        "path": "/labels",
        "response_model": "Dict[str, Any]",
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get label usage statistics across all tasks."
      },
      {
        "lineno": 348,
        "method": "GET",
        "path": "/labels",
        "response_model": null,
        "source": "services/collab-hub/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 117,
        "method": "GET",
        "path": "/metrics",
        "response_model": null,
        "source": "services/collab-hub/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 19,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/collab-hub/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness probe - checks if service can handle requests."
      },
      {
        "lineno": 858,
        "method": "GET",
        "path": "/stats",
        "response_model": "CollabStats",
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get overall collaboration hub statistics."
      },
      {
        "lineno": 115,
        "method": "GET",
        "path": "/tasks",
        "response_model": null,
        "source": "services/collab-hub/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/tasks instead"
      },
      {
        "lineno": 252,
        "method": "GET",
        "path": "/tasks",
        "response_model": "PaginatedResponse[Task]",
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List tasks with filtering, searching, and pagination."
      },
      {
        "lineno": 128,
        "method": "GET",
        "path": "/tasks",
        "response_model": null,
        "source": "services/collab-hub/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 127,
        "method": "POST",
        "path": "/tasks",
        "response_model": null,
        "source": "services/collab-hub/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/tasks instead"
      },
      {
        "lineno": 309,
        "method": "POST",
        "path": "/tasks",
        "response_model": "Task",
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Create a new task with comprehensive properties."
      },
      {
        "lineno": 133,
        "method": "POST",
        "path": "/tasks",
        "response_model": null,
        "source": "services/collab-hub/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 508,
        "method": "POST",
        "path": "/tasks/bulk",
        "response_model": "TaskBulkResult",
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Perform bulk operations on multiple tasks."
      },
      {
        "lineno": 151,
        "method": "DELETE",
        "path": "/tasks/{task_id}",
        "response_model": null,
        "source": "services/collab-hub/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/tasks/{task_id} instead"
      },
      {
        "lineno": 468,
        "method": "DELETE",
        "path": "/tasks/{task_id}",
        "response_model": null,
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Delete task and associated comments/files."
      },
      {
        "lineno": 161,
        "method": "DELETE",
        "path": "/tasks/{task_id}",
        "response_model": null,
        "source": "services/collab-hub/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 350,
        "method": "GET",
        "path": "/tasks/{task_id}",
        "response_model": "Task",
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get task details by ID."
      },
      {
        "lineno": 365,
        "method": "PUT",
        "path": "/tasks/{task_id}",
        "response_model": "Task",
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Update task properties with change tracking."
      },
      {
        "lineno": 139,
        "method": "POST",
        "path": "/tasks/{task_id}/move",
        "response_model": null,
        "source": "services/collab-hub/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/tasks/{task_id}/move instead"
      },
      {
        "lineno": 420,
        "method": "POST",
        "path": "/tasks/{task_id}/move",
        "response_model": "Task",
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Move task to different status (todo, in_progress, done, etc.)."
      },
      {
        "lineno": 144,
        "method": "POST",
        "path": "/tasks/{task_id}/move",
        "response_model": null,
        "source": "services/collab-hub/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 163,
        "method": "POST",
        "path": "/tasks/{task_id}/update",
        "response_model": null,
        "source": "services/collab-hub/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/tasks/{task_id} (PUT) instead"
      },
      {
        "lineno": 268,
        "method": "POST",
        "path": "/tasks/{task_id}/update",
        "response_model": null,
        "source": "services/collab-hub/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 751,
        "method": "GET",
        "path": "/workspaces",
        "response_model": "PaginatedResponse[Workspace]",
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List workspaces accessible to user."
      },
      {
        "lineno": 781,
        "method": "POST",
        "path": "/workspaces",
        "response_model": "Workspace",
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Create new workspace with creator as owner."
      },
      {
        "lineno": 817,
        "method": "GET",
        "path": "/workspaces/{workspace_id}/stats",
        "response_model": "WorkspaceStats",
        "source": "services/collab-hub/routers/collab_hub_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get comprehensive workspace statistics."
      }
    ],
    "doc-entities": [
      {
        "lineno": 166,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/doc-entities/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 21,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/doc-entities/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 29,
        "method": "GET",
        "path": "/info",
        "response_model": null,
        "source": "services/doc-entities/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 146,
        "method": "POST",
        "path": "/ner",
        "response_model": null,
        "source": "services/doc-entities/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 25,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/doc-entities/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 159,
        "method": "POST",
        "path": "/summary",
        "response_model": null,
        "source": "services/doc-entities/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      }
    ],
    "egress-gateway": [
      {
        "lineno": 308,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/egress-gateway/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Root endpoint with service information."
      },
      {
        "lineno": 109,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/egress-gateway/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Root endpoint explaining deprecation."
      },
      {
        "lineno": 271,
        "method": "GET",
        "path": "/health",
        "response_model": null,
        "source": "services/egress-gateway/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /healthz instead."
      },
      {
        "lineno": 76,
        "method": "GET",
        "path": "/health",
        "response_model": null,
        "source": "services/egress-gateway/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /healthz instead."
      },
      {
        "lineno": 266,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/egress-gateway/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /healthz instead (this endpoint redirects)."
      },
      {
        "lineno": 71,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/egress-gateway/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health check - redirects to new implementation."
      },
      {
        "lineno": 34,
        "method": "GET",
        "path": "/healthz",
        "response_model": "HealthResponse",
        "source": "services/egress-gateway/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health Check"
      },
      {
        "lineno": 131,
        "method": "GET",
        "path": "/info",
        "response_model": "Dict[str, Any]",
        "source": "services/egress-gateway/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service Information"
      },
      {
        "lineno": 292,
        "method": "POST",
        "path": "/proxy/bulk",
        "response_model": "BulkProxyResponse",
        "source": "services/egress-gateway/routers/egress_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Execute Bulk Proxy Requests"
      },
      {
        "lineno": 753,
        "method": "GET",
        "path": "/proxy/capabilities",
        "response_model": "ProxyCapabilities",
        "source": "services/egress-gateway/routers/egress_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Proxy Capabilities"
      },
      {
        "lineno": 655,
        "method": "GET",
        "path": "/proxy/health",
        "response_model": "ProxyHealthStatus",
        "source": "services/egress-gateway/routers/egress_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Proxy Health Status"
      },
      {
        "lineno": 279,
        "method": "POST",
        "path": "/proxy/request",
        "response_model": null,
        "source": "services/egress-gateway/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/proxy/request instead."
      },
      {
        "lineno": 81,
        "method": "POST",
        "path": "/proxy/request",
        "response_model": null,
        "source": "services/egress-gateway/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/proxy/request instead."
      },
      {
        "lineno": 148,
        "method": "POST",
        "path": "/proxy/request",
        "response_model": "ProxyResponse",
        "source": "services/egress-gateway/routers/egress_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Execute Proxy Request"
      },
      {
        "lineno": 804,
        "method": "GET",
        "path": "/proxy/requests",
        "response_model": "PaginatedResponse[Dict[str, Any]]",
        "source": "services/egress-gateway/routers/egress_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Request History"
      },
      {
        "lineno": 888,
        "method": "DELETE",
        "path": "/proxy/requests/history",
        "response_model": null,
        "source": "services/egress-gateway/routers/egress_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Clear Request History"
      },
      {
        "lineno": 297,
        "method": "POST",
        "path": "/proxy/rotate",
        "response_model": null,
        "source": "services/egress-gateway/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/proxy/rotate instead."
      },
      {
        "lineno": 91,
        "method": "POST",
        "path": "/proxy/rotate",
        "response_model": null,
        "source": "services/egress-gateway/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/proxy/rotate instead."
      },
      {
        "lineno": 488,
        "method": "POST",
        "path": "/proxy/rotate",
        "response_model": "RotationResult",
        "source": "services/egress-gateway/routers/egress_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Rotate Proxy Identity"
      },
      {
        "lineno": 570,
        "method": "GET",
        "path": "/proxy/statistics",
        "response_model": "ProxyStatistics",
        "source": "services/egress-gateway/routers/egress_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Proxy Statistics"
      },
      {
        "lineno": 288,
        "method": "GET",
        "path": "/proxy/status",
        "response_model": null,
        "source": "services/egress-gateway/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/proxy/status instead."
      },
      {
        "lineno": 86,
        "method": "GET",
        "path": "/proxy/status",
        "response_model": null,
        "source": "services/egress-gateway/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/proxy/status instead."
      },
      {
        "lineno": 417,
        "method": "GET",
        "path": "/proxy/status",
        "response_model": "ProxyStatus",
        "source": "services/egress-gateway/routers/egress_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Proxy Status"
      },
      {
        "lineno": 55,
        "method": "GET",
        "path": "/readyz",
        "response_model": "ReadyResponse",
        "source": "services/egress-gateway/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness Check"
      }
    ],
    "entity-resolution": [
      {
        "lineno": 50,
        "method": "POST",
        "path": "/dedupe",
        "response_model": null,
        "source": "services/entity-resolution/.archive/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 23,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/entity-resolution/.archive/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 38,
        "method": "POST",
        "path": "/match",
        "response_model": null,
        "source": "services/entity-resolution/.archive/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      }
    ],
    "federation-proxy": [
      {
        "lineno": 206,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/federation-proxy/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and available endpoints."
      },
      {
        "lineno": 91,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/federation-proxy/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Deprecated root endpoint with migration information."
      },
      {
        "lineno": 43,
        "method": "GET",
        "path": "/federation/config",
        "response_model": "FederationConfig",
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get current federation configuration."
      },
      {
        "lineno": 69,
        "method": "PUT",
        "path": "/federation/config",
        "response_model": null,
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Update federation configuration with validation and hot reload."
      },
      {
        "lineno": 111,
        "method": "POST",
        "path": "/federation/config/validate",
        "response_model": null,
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Validate federation configuration without applying changes."
      },
      {
        "lineno": 513,
        "method": "POST",
        "path": "/federation/discovery/refresh",
        "response_model": null,
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Trigger a refresh of service discovery across all federated endpoints."
      },
      {
        "lineno": 145,
        "method": "GET",
        "path": "/federation/endpoints",
        "response_model": "PaginatedResponse[RemoteEndpoint]",
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List all configured remote federation endpoints with filtering."
      },
      {
        "lineno": 211,
        "method": "POST",
        "path": "/federation/endpoints",
        "response_model": "RemoteEndpoint",
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Register a new remote federation endpoint."
      },
      {
        "lineno": 285,
        "method": "DELETE",
        "path": "/federation/endpoints/{endpoint_id}",
        "response_model": null,
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Remove a remote federation endpoint."
      },
      {
        "lineno": 182,
        "method": "GET",
        "path": "/federation/endpoints/{endpoint_id}",
        "response_model": "RemoteEndpoint",
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get detailed information about a specific remote endpoint."
      },
      {
        "lineno": 247,
        "method": "PUT",
        "path": "/federation/endpoints/{endpoint_id}",
        "response_model": "RemoteEndpoint",
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Update remote endpoint configuration with validation."
      },
      {
        "lineno": 421,
        "method": "POST",
        "path": "/federation/endpoints/{endpoint_id}/health-check",
        "response_model": null,
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Trigger an immediate health check for a specific endpoint."
      },
      {
        "lineno": 394,
        "method": "GET",
        "path": "/federation/health",
        "response_model": "List[HealthStatus]",
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get comprehensive health status of all federated endpoints."
      },
      {
        "lineno": 595,
        "method": "GET",
        "path": "/federation/load-balancer",
        "response_model": "LoadBalancer",
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get current load balancing configuration and status."
      },
      {
        "lineno": 613,
        "method": "PUT",
        "path": "/federation/load-balancer",
        "response_model": null,
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Update load balancing configuration."
      },
      {
        "lineno": 453,
        "method": "GET",
        "path": "/federation/metrics",
        "response_model": "FederationMetrics",
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get comprehensive federation performance metrics."
      },
      {
        "lineno": 548,
        "method": "GET",
        "path": "/federation/security/policies",
        "response_model": "List[SecurityPolicy]",
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List all federation security policies and their assignments."
      },
      {
        "lineno": 566,
        "method": "POST",
        "path": "/federation/security/policies",
        "response_model": "SecurityPolicy",
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Create a new federation security policy."
      },
      {
        "lineno": 486,
        "method": "GET",
        "path": "/federation/topology",
        "response_model": "FederationTopology",
        "source": "services/federation-proxy/routers/federation_proxy_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get current federation topology and service discovery information."
      },
      {
        "lineno": 183,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/federation-proxy/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy health endpoint. Use /v1/healthz instead."
      },
      {
        "lineno": 12,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/federation-proxy/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Liveness probe - returns OK if service is running."
      },
      {
        "lineno": 109,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/federation-proxy/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Deprecated health endpoint."
      },
      {
        "lineno": 66,
        "method": "GET",
        "path": "/info",
        "response_model": null,
        "source": "services/federation-proxy/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and capabilities."
      },
      {
        "lineno": 18,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/federation-proxy/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness probe - checks if service can handle requests."
      },
      {
        "lineno": 190,
        "method": "GET",
        "path": "/remotes",
        "response_model": null,
        "source": "services/federation-proxy/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy remotes endpoint. Use /v1/federation/endpoints instead."
      },
      {
        "lineno": 121,
        "method": "GET",
        "path": "/remotes",
        "response_model": null,
        "source": "services/federation-proxy/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Deprecated remotes list endpoint."
      },
      {
        "lineno": 137,
        "method": "POST",
        "path": "/remotes",
        "response_model": null,
        "source": "services/federation-proxy/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Deprecated add remote endpoint."
      },
      {
        "lineno": 163,
        "method": "DELETE",
        "path": "/remotes/{remote_id}",
        "response_model": null,
        "source": "services/federation-proxy/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Deprecated delete remote endpoint."
      }
    ],
    "feed-ingestor": [
      {
        "lineno": 611,
        "method": "DELETE",
        "path": "/feeds/otx/cache",
        "response_model": null,
        "source": "services/feed-ingestor/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 593,
        "method": "POST",
        "path": "/feeds/otx/run",
        "response_model": "OTXRunResponse",
        "source": "services/feed-ingestor/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 587,
        "method": "DELETE",
        "path": "/feeds/rss/items",
        "response_model": null,
        "source": "services/feed-ingestor/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 582,
        "method": "GET",
        "path": "/feeds/rss/items",
        "response_model": "List[FeedItem]",
        "source": "services/feed-ingestor/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 568,
        "method": "POST",
        "path": "/feeds/rss/run",
        "response_model": "RunResponse",
        "source": "services/feed-ingestor/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 544,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/feed-ingestor/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 554,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/feed-ingestor/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      }
    ],
    "feedback-aggregator": [
      {
        "lineno": 75,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/feedback-aggregator/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Deprecated root endpoint with migration information."
      },
      {
        "lineno": 213,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/feedback-aggregator/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and available endpoints."
      },
      {
        "lineno": 105,
        "method": "GET",
        "path": "/feedback",
        "response_model": null,
        "source": "services/feedback-aggregator/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Deprecated feedback list endpoint."
      },
      {
        "lineno": 182,
        "method": "GET",
        "path": "/feedback",
        "response_model": null,
        "source": "services/feedback-aggregator/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy feedback list endpoint. Use /v1/feedback instead."
      },
      {
        "lineno": 103,
        "method": "GET",
        "path": "/feedback",
        "response_model": "PaginatedResponse[FeedbackResponse]",
        "source": "services/feedback-aggregator/routers/feedback_aggregator_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List feedback entries with comprehensive filtering and search."
      },
      {
        "lineno": 119,
        "method": "POST",
        "path": "/feedback",
        "response_model": null,
        "source": "services/feedback-aggregator/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Deprecated feedback creation endpoint."
      },
      {
        "lineno": 197,
        "method": "POST",
        "path": "/feedback",
        "response_model": null,
        "source": "services/feedback-aggregator/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy feedback creation endpoint. Use /v1/feedback instead."
      },
      {
        "lineno": 68,
        "method": "POST",
        "path": "/feedback",
        "response_model": "FeedbackResponse",
        "source": "services/feedback-aggregator/routers/feedback_aggregator_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Submit new user feedback with intelligent analysis."
      },
      {
        "lineno": 402,
        "method": "POST",
        "path": "/feedback/bulk",
        "response_model": "BulkOperationResult",
        "source": "services/feedback-aggregator/routers/feedback_aggregator_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Perform bulk operations on multiple feedback items."
      },
      {
        "lineno": 147,
        "method": "GET",
        "path": "/feedback/stats",
        "response_model": null,
        "source": "services/feedback-aggregator/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Deprecated stats endpoint."
      },
      {
        "lineno": 306,
        "method": "GET",
        "path": "/feedback/stats",
        "response_model": "FeedbackStats",
        "source": "services/feedback-aggregator/routers/feedback_aggregator_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get comprehensive feedback statistics and metrics."
      },
      {
        "lineno": 433,
        "method": "GET",
        "path": "/feedback/tags",
        "response_model": "List[Dict[str, Any]]",
        "source": "services/feedback-aggregator/routers/feedback_aggregator_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get most popular feedback tags with usage statistics."
      },
      {
        "lineno": 334,
        "method": "GET",
        "path": "/feedback/trends",
        "response_model": "FeedbackTrends",
        "source": "services/feedback-aggregator/routers/feedback_aggregator_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get feedback trends over time with pattern analysis."
      },
      {
        "lineno": 158,
        "method": "GET",
        "path": "/feedback/{feedback_id}",
        "response_model": "FeedbackResponse",
        "source": "services/feedback-aggregator/routers/feedback_aggregator_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get detailed information about a specific feedback item."
      },
      {
        "lineno": 188,
        "method": "PUT",
        "path": "/feedback/{feedback_id}",
        "response_model": "FeedbackResponse",
        "source": "services/feedback-aggregator/routers/feedback_aggregator_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Update feedback properties with change tracking."
      },
      {
        "lineno": 269,
        "method": "DELETE",
        "path": "/feedback/{feedback_id}/vote",
        "response_model": null,
        "source": "services/feedback-aggregator/routers/feedback_aggregator_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Remove user's vote from feedback item."
      },
      {
        "lineno": 133,
        "method": "POST",
        "path": "/feedback/{feedback_id}/vote",
        "response_model": null,
        "source": "services/feedback-aggregator/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Deprecated vote endpoint."
      },
      {
        "lineno": 231,
        "method": "POST",
        "path": "/feedback/{feedback_id}/vote",
        "response_model": "VoteResponse",
        "source": "services/feedback-aggregator/routers/feedback_aggregator_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Vote on feedback item to indicate user support."
      },
      {
        "lineno": 93,
        "method": "GET",
        "path": "/health",
        "response_model": null,
        "source": "services/feedback-aggregator/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Deprecated health endpoint."
      },
      {
        "lineno": 175,
        "method": "GET",
        "path": "/health",
        "response_model": null,
        "source": "services/feedback-aggregator/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy health endpoint. Use /v1/healthz instead."
      },
      {
        "lineno": 364,
        "method": "GET",
        "path": "/health",
        "response_model": "FeedbackHealthStatus",
        "source": "services/feedback-aggregator/routers/feedback_aggregator_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get comprehensive feedback aggregator health status."
      },
      {
        "lineno": 13,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/feedback-aggregator/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Liveness probe - returns OK if service is running."
      },
      {
        "lineno": 87,
        "method": "GET",
        "path": "/info",
        "response_model": null,
        "source": "services/feedback-aggregator/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and capabilities."
      },
      {
        "lineno": 19,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/feedback-aggregator/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness probe - checks if service can handle requests."
      }
    ],
    "flowise-connector": [
      {
        "lineno": 219,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/flowise-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and available endpoints."
      },
      {
        "lineno": 170,
        "method": "POST",
        "path": "/chat",
        "response_model": null,
        "source": "services/flowise-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/agents/chat instead."
      },
      {
        "lineno": 52,
        "method": "POST",
        "path": "/chat",
        "response_model": "ChatResponse",
        "source": "services/flowise-connector/routers/agents_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Chat with AI Agent"
      },
      {
        "lineno": 616,
        "method": "POST",
        "path": "/chat",
        "response_model": "ChatResponse",
        "source": "services/flowise-connector/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 755,
        "method": "POST",
        "path": "/chat/{conversation_id}/cancel",
        "response_model": "CancelResponse",
        "source": "services/flowise-connector/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 283,
        "method": "GET",
        "path": "/conversations",
        "response_model": "ConversationListResponse",
        "source": "services/flowise-connector/routers/agents_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List Conversations"
      },
      {
        "lineno": 206,
        "method": "DELETE",
        "path": "/conversations/{conversation_id}",
        "response_model": null,
        "source": "services/flowise-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/agents/conversations/{conversation_id} instead."
      },
      {
        "lineno": 388,
        "method": "DELETE",
        "path": "/conversations/{conversation_id}",
        "response_model": null,
        "source": "services/flowise-connector/routers/agents_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Delete Conversation"
      },
      {
        "lineno": 341,
        "method": "GET",
        "path": "/conversations/{conversation_id}",
        "response_model": "ConversationHistoryResponse",
        "source": "services/flowise-connector/routers/agents_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Conversation History"
      },
      {
        "lineno": 194,
        "method": "GET",
        "path": "/conversations/{conversation_id}/history",
        "response_model": null,
        "source": "services/flowise-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/agents/conversations/{conversation_id} instead."
      },
      {
        "lineno": 124,
        "method": "POST",
        "path": "/execute",
        "response_model": "ToolExecutionResponse",
        "source": "services/flowise-connector/routers/agents_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Execute Single Tool"
      },
      {
        "lineno": 122,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/flowise-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use core health endpoint instead."
      },
      {
        "lineno": 114,
        "method": "GET",
        "path": "/healthz",
        "response_model": "HealthResponse",
        "source": "services/flowise-connector/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health Check"
      },
      {
        "lineno": 588,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/flowise-connector/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 146,
        "method": "GET",
        "path": "/info",
        "response_model": "Dict[str, Any]",
        "source": "services/flowise-connector/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service Information"
      },
      {
        "lineno": 765,
        "method": "GET",
        "path": "/info",
        "response_model": null,
        "source": "services/flowise-connector/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 134,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/flowise-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use core readiness endpoint instead."
      },
      {
        "lineno": 130,
        "method": "GET",
        "path": "/readyz",
        "response_model": "ReadyResponse",
        "source": "services/flowise-connector/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness Check"
      },
      {
        "lineno": 593,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/flowise-connector/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 418,
        "method": "GET",
        "path": "/status",
        "response_model": "AgentStatusResponse",
        "source": "services/flowise-connector/routers/agents_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Agent System Status"
      },
      {
        "lineno": 146,
        "method": "GET",
        "path": "/tools",
        "response_model": null,
        "source": "services/flowise-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/agents/tools instead."
      },
      {
        "lineno": 172,
        "method": "GET",
        "path": "/tools",
        "response_model": "ToolListResponse",
        "source": "services/flowise-connector/routers/agents_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List Available Tools"
      },
      {
        "lineno": 610,
        "method": "GET",
        "path": "/tools",
        "response_model": "ToolsResponse",
        "source": "services/flowise-connector/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 158,
        "method": "POST",
        "path": "/tools/execute",
        "response_model": null,
        "source": "services/flowise-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/agents/execute instead."
      },
      {
        "lineno": 182,
        "method": "GET",
        "path": "/workflows",
        "response_model": null,
        "source": "services/flowise-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/agents/workflows instead."
      },
      {
        "lineno": 224,
        "method": "GET",
        "path": "/workflows",
        "response_model": "WorkflowListResponse",
        "source": "services/flowise-connector/routers/agents_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List Agent Workflows"
      }
    ],
    "forensics": [
      {
        "lineno": 127,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/forensics/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service root information."
      },
      {
        "lineno": 120,
        "method": "GET",
        "path": "/chain/report",
        "response_model": null,
        "source": "services/forensics/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy chain report endpoint. Use /v1/chain/report instead."
      },
      {
        "lineno": 92,
        "method": "GET",
        "path": "/chain/report",
        "response_model": null,
        "source": "services/forensics/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Return the full append-only ledger."
      },
      {
        "lineno": 96,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/forensics/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy health endpoint. Use /healthz instead."
      },
      {
        "lineno": 13,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/forensics/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Liveness probe - returns OK if service is running."
      },
      {
        "lineno": 43,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/forensics/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 39,
        "method": "GET",
        "path": "/info",
        "response_model": null,
        "source": "services/forensics/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and version."
      },
      {
        "lineno": 102,
        "method": "POST",
        "path": "/ingest",
        "response_model": null,
        "source": "services/forensics/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy ingest endpoint. Use /v1/evidence/ingest instead."
      },
      {
        "lineno": 48,
        "method": "POST",
        "path": "/ingest",
        "response_model": null,
        "source": "services/forensics/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 19,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/forensics/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness probe - checks if service can handle requests."
      },
      {
        "lineno": 114,
        "method": "GET",
        "path": "/receipt/{sha256}",
        "response_model": null,
        "source": "services/forensics/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy receipt endpoint. Use /v1/evidence/{sha256}/receipt instead."
      },
      {
        "lineno": 77,
        "method": "GET",
        "path": "/receipt/{sha256}",
        "response_model": null,
        "source": "services/forensics/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Return a signed receipt for a given SHA256 if present in ledger."
      },
      {
        "lineno": 197,
        "method": "GET",
        "path": "/v1/chain/report",
        "response_model": "ChainReport",
        "source": "services/forensics/routers/forensics_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get complete chain of custody report."
      },
      {
        "lineno": 235,
        "method": "GET",
        "path": "/v1/evidence",
        "response_model": "PaginatedResponse",
        "source": "services/forensics/routers/forensics_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List evidence entries with pagination."
      },
      {
        "lineno": 85,
        "method": "POST",
        "path": "/v1/evidence/ingest",
        "response_model": "IngestResponse",
        "source": "services/forensics/routers/forensics_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Ingest digital evidence into chain of custody."
      },
      {
        "lineno": 118,
        "method": "POST",
        "path": "/v1/evidence/verify",
        "response_model": "VerifyResponse",
        "source": "services/forensics/routers/forensics_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Verify if evidence exists in chain of custody."
      },
      {
        "lineno": 154,
        "method": "GET",
        "path": "/v1/evidence/{sha256}/receipt",
        "response_model": "ReceiptResponse",
        "source": "services/forensics/routers/forensics_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get cryptographically signed receipt for evidence."
      },
      {
        "lineno": 108,
        "method": "POST",
        "path": "/verify",
        "response_model": null,
        "source": "services/forensics/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy verify endpoint. Use /v1/evidence/verify instead."
      },
      {
        "lineno": 62,
        "method": "POST",
        "path": "/verify",
        "response_model": null,
        "source": "services/forensics/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      }
    ],
    "gateway": [
      {
        "lineno": 130,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/gateway/app/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 140,
        "method": "GET",
        "path": "/metrics",
        "response_model": null,
        "source": "services/gateway/app/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 135,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/gateway/app/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      }
    ],
    "graph-api": [
      {
        "lineno": 943,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/graph-api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and available endpoints."
      },
      {
        "lineno": 265,
        "method": "POST",
        "path": "/alg/betweenness",
        "response_model": null,
        "source": "services/graph-api/app/routes/alg.py",
        "status_codes": [
          "200"
        ],
        "summary": "Compute betweenness centrality for nodes"
      },
      {
        "lineno": 431,
        "method": "GET",
        "path": "/alg/centrality-summary/{node_id}",
        "response_model": null,
        "source": "services/graph-api/app/routes/alg.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get a summary of all centrality measures for a specific node"
      },
      {
        "lineno": 286,
        "method": "POST",
        "path": "/alg/closeness",
        "response_model": null,
        "source": "services/graph-api/app/routes/alg.py",
        "status_codes": [
          "200"
        ],
        "summary": "Compute closeness centrality for nodes"
      },
      {
        "lineno": 467,
        "method": "GET",
        "path": "/alg/community-stats",
        "response_model": null,
        "source": "services/graph-api/app/routes/alg.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get overall community statistics"
      },
      {
        "lineno": 219,
        "method": "POST",
        "path": "/alg/degree",
        "response_model": null,
        "source": "services/graph-api/app/routes/alg.py",
        "status_codes": [
          "200"
        ],
        "summary": "Compute degree centrality for nodes"
      },
      {
        "lineno": 373,
        "method": "POST",
        "path": "/alg/label-propagation",
        "response_model": null,
        "source": "services/graph-api/app/routes/alg.py",
        "status_codes": [
          "200"
        ],
        "summary": "Compute Label Propagation community detection"
      },
      {
        "lineno": 349,
        "method": "POST",
        "path": "/alg/louvain",
        "response_model": null,
        "source": "services/graph-api/app/routes/alg.py",
        "status_codes": [
          "200"
        ],
        "summary": "Compute Louvain community detection"
      },
      {
        "lineno": 322,
        "method": "POST",
        "path": "/alg/pagerank",
        "response_model": null,
        "source": "services/graph-api/app/routes/alg.py",
        "status_codes": [
          "200"
        ],
        "summary": "Compute PageRank centrality for nodes"
      },
      {
        "lineno": 397,
        "method": "POST",
        "path": "/alg/shortest",
        "response_model": null,
        "source": "services/graph-api/app/routes/alg.py",
        "status_codes": [
          "200"
        ],
        "summary": "Find shortest path between two nodes"
      },
      {
        "lineno": 43,
        "method": "GET",
        "path": "/export/graphml",
        "response_model": null,
        "source": "services/graph-api/app/routes/export.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 35,
        "method": "GET",
        "path": "/export/json",
        "response_model": null,
        "source": "services/graph-api/app/routes/export.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 165,
        "method": "POST",
        "path": "/geo/batch-geocode",
        "response_model": null,
        "source": "services/graph-api/app/routes/geospatial.py",
        "status_codes": [
          "200"
        ],
        "summary": "Start batch geocoding of nodes in the background."
      },
      {
        "lineno": 38,
        "method": "GET",
        "path": "/geo/entities",
        "response_model": null,
        "source": "services/graph-api/app/routes/geospatial.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get entities within a bounding box."
      },
      {
        "lineno": 74,
        "method": "POST",
        "path": "/geo/entities/nearby",
        "response_model": null,
        "source": "services/graph-api/app/routes/geospatial.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get entities near a specific point."
      },
      {
        "lineno": 106,
        "method": "POST",
        "path": "/geo/geocode",
        "response_model": null,
        "source": "services/graph-api/app/routes/geospatial.py",
        "status_codes": [
          "200"
        ],
        "summary": "Geocode a location string."
      },
      {
        "lineno": 261,
        "method": "GET",
        "path": "/geo/heatmap",
        "response_model": null,
        "source": "services/graph-api/app/routes/geospatial.py",
        "status_codes": [
          "200"
        ],
        "summary": "Generate heatmap data for entities in a bounding box."
      },
      {
        "lineno": 228,
        "method": "POST",
        "path": "/geo/node/coordinates",
        "response_model": null,
        "source": "services/graph-api/app/routes/geospatial.py",
        "status_codes": [
          "200"
        ],
        "summary": "Manually set coordinates for a node."
      },
      {
        "lineno": 140,
        "method": "POST",
        "path": "/geo/node/geocode",
        "response_model": null,
        "source": "services/graph-api/app/routes/geospatial.py",
        "status_codes": [
          "200"
        ],
        "summary": "Geocode a specific node and update it with coordinates."
      },
      {
        "lineno": 204,
        "method": "GET",
        "path": "/geo/statistics",
        "response_model": null,
        "source": "services/graph-api/app/routes/geospatial.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get geospatial statistics."
      },
      {
        "lineno": 88,
        "method": "GET",
        "path": "/graphs/analysis/communities",
        "response_model": null,
        "source": "services/graph-api/app/routes/analytics.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 49,
        "method": "GET",
        "path": "/graphs/analysis/degree",
        "response_model": null,
        "source": "services/graph-api/app/routes/analytics.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 123,
        "method": "POST",
        "path": "/graphs/analysis/shortest-path",
        "response_model": null,
        "source": "services/graph-api/app/routes/analytics.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 184,
        "method": "GET",
        "path": "/graphs/analysis/subgraph-export",
        "response_model": null,
        "source": "services/graph-api/app/routes/analytics.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 143,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/graph-api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health check endpoint (legacy response schema)."
      },
      {
        "lineno": 903,
        "method": "GET",
        "path": "/neighbors",
        "response_model": null,
        "source": "services/graph-api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/nodes/{id}/neighbors instead."
      },
      {
        "lineno": 929,
        "method": "GET",
        "path": "/neo4j/ping",
        "response_model": null,
        "source": "services/graph-api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy ping endpoint for Neo4j connectivity."
      },
      {
        "lineno": 878,
        "method": "POST",
        "path": "/query",
        "response_model": null,
        "source": "services/graph-api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/cypher instead."
      },
      {
        "lineno": 149,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/graph-api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness check endpoint with legacy response schema."
      },
      {
        "lineno": 595,
        "method": "POST",
        "path": "/v1/algorithms/centrality",
        "response_model": "JobStatus",
        "source": "services/graph-api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Run centrality algorithm"
      },
      {
        "lineno": 646,
        "method": "POST",
        "path": "/v1/algorithms/communities",
        "response_model": "JobStatus",
        "source": "services/graph-api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Run community detection"
      },
      {
        "lineno": 383,
        "method": "POST",
        "path": "/v1/cypher",
        "response_model": "CypherResponse",
        "source": "services/graph-api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Execute Cypher query"
      },
      {
        "lineno": 83,
        "method": "POST",
        "path": "/v1/ingest/plugin-run",
        "response_model": null,
        "source": "services/graph-api/app/routes/ingest.py",
        "status_codes": [
          "200"
        ],
        "summary": "Persist plugin execution artefacts for graph exploration."
      },
      {
        "lineno": 119,
        "method": "POST",
        "path": "/v1/ingest/threat-indicators",
        "response_model": null,
        "source": "services/graph-api/app/routes/ingest.py",
        "status_codes": [
          "200"
        ],
        "summary": "Upsert AlienVault OTX style indicators into the graph."
      },
      {
        "lineno": 100,
        "method": "POST",
        "path": "/v1/ingest/video",
        "response_model": null,
        "source": "services/graph-api/app/routes/ingest.py",
        "status_codes": [
          "200"
        ],
        "summary": "Store simplified video pipeline metadata for downstream analysis."
      },
      {
        "lineno": 721,
        "method": "DELETE",
        "path": "/v1/jobs/{job_id}",
        "response_model": null,
        "source": "services/graph-api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Cancel job"
      },
      {
        "lineno": 697,
        "method": "GET",
        "path": "/v1/jobs/{job_id}",
        "response_model": "JobStatus",
        "source": "services/graph-api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get job status"
      },
      {
        "lineno": 412,
        "method": "GET",
        "path": "/v1/nodes/{node_id}/neighbors",
        "response_model": "NeighborResponse",
        "source": "services/graph-api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get node neighbors"
      },
      {
        "lineno": 498,
        "method": "POST",
        "path": "/v1/shortest-path",
        "response_model": "ShortestPathResponse",
        "source": "services/graph-api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Find shortest path"
      }
    ],
    "graph-views": [
      {
        "lineno": 671,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/graph-views/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and available endpoints."
      },
      {
        "lineno": 45,
        "method": "POST",
        "path": "/dossier",
        "response_model": null,
        "source": "services/graph-views/dossier/api.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 68,
        "method": "GET",
        "path": "/geo/entities",
        "response_model": null,
        "source": "services/graph-views/geo.py",
        "status_codes": [
          "200"
        ],
        "summary": "Return a small set of sample entities as GeoJSON."
      },
      {
        "lineno": 37,
        "method": "GET",
        "path": "/geo/get",
        "response_model": null,
        "source": "services/graph-views/geo.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 29,
        "method": "GET",
        "path": "/geo/list",
        "response_model": null,
        "source": "services/graph-views/geo.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 45,
        "method": "GET",
        "path": "/geo/query",
        "response_model": null,
        "source": "services/graph-views/geo.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 13,
        "method": "POST",
        "path": "/geo/upload",
        "response_model": null,
        "source": "services/graph-views/geo.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 599,
        "method": "GET",
        "path": "/graphs/view/ego",
        "response_model": null,
        "source": "services/graph-views/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/views/ego instead."
      },
      {
        "lineno": 631,
        "method": "GET",
        "path": "/graphs/view/shortest-path",
        "response_model": null,
        "source": "services/graph-views/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/views/shortest-path instead."
      },
      {
        "lineno": 21,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/graph-views/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 29,
        "method": "GET",
        "path": "/info",
        "response_model": null,
        "source": "services/graph-views/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 17,
        "method": "GET",
        "path": "/ontology/entities",
        "response_model": null,
        "source": "services/graph-views/ontology/api.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 21,
        "method": "GET",
        "path": "/ontology/relations",
        "response_model": null,
        "source": "services/graph-views/ontology/api.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 25,
        "method": "POST",
        "path": "/ontology/validate",
        "response_model": null,
        "source": "services/graph-views/ontology/api.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 25,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/graph-views/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      }
    ],
    "media-forensics": [
      {
        "lineno": 139,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/media-forensics/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service root information."
      },
      {
        "lineno": 132,
        "method": "GET",
        "path": "/formats",
        "response_model": null,
        "source": "services/media-forensics/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy formats endpoint. Use /v1/formats instead."
      },
      {
        "lineno": 358,
        "method": "GET",
        "path": "/formats",
        "response_model": null,
        "source": "services/media-forensics/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get supported image formats and limits."
      },
      {
        "lineno": 108,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/media-forensics/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy health endpoint. Use /healthz instead."
      },
      {
        "lineno": 91,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/media-forensics/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 13,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/media-forensics/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Liveness probe - returns OK if service is running."
      },
      {
        "lineno": 114,
        "method": "POST",
        "path": "/image/analyze",
        "response_model": null,
        "source": "services/media-forensics/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy image analysis endpoint. Use /v1/images/analyze instead."
      },
      {
        "lineno": 236,
        "method": "POST",
        "path": "/image/analyze",
        "response_model": "ImageAnalysisResult",
        "source": "services/media-forensics/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Analyze an uploaded image for forensic information."
      },
      {
        "lineno": 120,
        "method": "POST",
        "path": "/image/compare",
        "response_model": null,
        "source": "services/media-forensics/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy image comparison endpoint. Use /v1/images/compare instead."
      },
      {
        "lineno": 291,
        "method": "POST",
        "path": "/image/compare",
        "response_model": "ComparisonResult",
        "source": "services/media-forensics/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Compare two images for similarity."
      },
      {
        "lineno": 126,
        "method": "GET",
        "path": "/image/hash/{hash_value}",
        "response_model": null,
        "source": "services/media-forensics/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy similar images endpoint. Use /v1/images/similar/{hash_value} instead."
      },
      {
        "lineno": 346,
        "method": "GET",
        "path": "/image/hash/{hash_value}",
        "response_model": null,
        "source": "services/media-forensics/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Find similar images by perceptual hash (placeholder for database integration)."
      },
      {
        "lineno": 56,
        "method": "GET",
        "path": "/info",
        "response_model": null,
        "source": "services/media-forensics/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and capabilities."
      },
      {
        "lineno": 96,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/media-forensics/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 19,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/media-forensics/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness probe - checks if service can handle requests."
      },
      {
        "lineno": 393,
        "method": "GET",
        "path": "/v1/formats",
        "response_model": "SupportedFormatsInfo",
        "source": "services/media-forensics/routers/media_forensics_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get supported image formats and service capabilities."
      },
      {
        "lineno": 243,
        "method": "POST",
        "path": "/v1/images/analyze",
        "response_model": "ImageAnalysisResult",
        "source": "services/media-forensics/routers/media_forensics_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Analyze an uploaded image for forensic information."
      },
      {
        "lineno": 414,
        "method": "POST",
        "path": "/v1/images/batch/analyze",
        "response_model": "PaginatedResponse",
        "source": "services/media-forensics/routers/media_forensics_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Analyze multiple images in batch."
      },
      {
        "lineno": 311,
        "method": "POST",
        "path": "/v1/images/compare",
        "response_model": "ComparisonResult",
        "source": "services/media-forensics/routers/media_forensics_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Compare two images for similarity using perceptual hashing."
      },
      {
        "lineno": 374,
        "method": "GET",
        "path": "/v1/images/similar/{hash_value}",
        "response_model": "SimilarImagesResult",
        "source": "services/media-forensics/routers/media_forensics_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Find similar images by perceptual hash."
      },
      {
        "lineno": 461,
        "method": "GET",
        "path": "/v1/images/{sha256}/metadata",
        "response_model": null,
        "source": "services/media-forensics/routers/media_forensics_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get cached metadata for an image by SHA256 hash."
      },
      {
        "lineno": 475,
        "method": "POST",
        "path": "/v1/videos/analyze",
        "response_model": "VideoAnalysisResponse",
        "source": "services/media-forensics/routers/media_forensics_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Analyze video file"
      }
    ],
    "opa-audit-sink": [
      {
        "lineno": 287,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/opa-audit-sink/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Root endpoint with service information."
      },
      {
        "lineno": 125,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/opa-audit-sink/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Root endpoint explaining deprecation."
      },
      {
        "lineno": 11,
        "method": "POST",
        "path": "/audit",
        "response_model": null,
        "source": "services/opa-audit-sink/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 646,
        "method": "GET",
        "path": "/capabilities",
        "response_model": "AuditCapabilities",
        "source": "services/opa-audit-sink/routers/audit_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Audit System Capabilities"
      },
      {
        "lineno": 845,
        "method": "GET",
        "path": "/config",
        "response_model": null,
        "source": "services/opa-audit-sink/routers/audit_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Audit Configuration"
      },
      {
        "lineno": 783,
        "method": "PUT",
        "path": "/config",
        "response_model": null,
        "source": "services/opa-audit-sink/routers/audit_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Update Audit Configuration"
      },
      {
        "lineno": 553,
        "method": "GET",
        "path": "/health/comprehensive",
        "response_model": "AuditHealthStatus",
        "source": "services/opa-audit-sink/routers/audit_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Comprehensive Audit Health"
      },
      {
        "lineno": 280,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/opa-audit-sink/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /healthz instead (this endpoint redirects)."
      },
      {
        "lineno": 106,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/opa-audit-sink/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /healthz in app_v1.py instead."
      },
      {
        "lineno": 34,
        "method": "GET",
        "path": "/healthz",
        "response_model": "HealthResponse",
        "source": "services/opa-audit-sink/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health Check"
      },
      {
        "lineno": 7,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/opa-audit-sink/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 135,
        "method": "GET",
        "path": "/info",
        "response_model": "Dict[str, Any]",
        "source": "services/opa-audit-sink/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service Information"
      },
      {
        "lineno": 271,
        "method": "POST",
        "path": "/logs",
        "response_model": null,
        "source": "services/opa-audit-sink/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/logs instead."
      },
      {
        "lineno": 112,
        "method": "POST",
        "path": "/logs",
        "response_model": null,
        "source": "services/opa-audit-sink/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/logs instead."
      },
      {
        "lineno": 142,
        "method": "POST",
        "path": "/logs",
        "response_model": "AuditIngestResult",
        "source": "services/opa-audit-sink/routers/audit_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Ingest OPA Decision Logs"
      },
      {
        "lineno": 225,
        "method": "POST",
        "path": "/logs/bulk",
        "response_model": "AuditIngestResult",
        "source": "services/opa-audit-sink/routers/audit_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Bulk Ingest OPA Logs"
      },
      {
        "lineno": 253,
        "method": "GET",
        "path": "/logs/query",
        "response_model": "AuditQueryResult",
        "source": "services/opa-audit-sink/routers/audit_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Query Audit Logs"
      },
      {
        "lineno": 118,
        "method": "GET",
        "path": "/metrics",
        "response_model": null,
        "source": "services/opa-audit-sink/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/statistics instead."
      },
      {
        "lineno": 55,
        "method": "GET",
        "path": "/readyz",
        "response_model": "ReadyResponse",
        "source": "services/opa-audit-sink/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness Check"
      },
      {
        "lineno": 744,
        "method": "GET",
        "path": "/retention/policies",
        "response_model": "List[RetentionPolicyStatus]",
        "source": "services/opa-audit-sink/routers/audit_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List Retention Policies"
      },
      {
        "lineno": 688,
        "method": "POST",
        "path": "/retention/policy",
        "response_model": "RetentionPolicyStatus",
        "source": "services/opa-audit-sink/routers/audit_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Set Retention Policy"
      },
      {
        "lineno": 404,
        "method": "GET",
        "path": "/statistics",
        "response_model": "AuditStatistics",
        "source": "services/opa-audit-sink/routers/audit_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Audit Statistics"
      }
    ],
    "openbb-connector": [
      {
        "lineno": 300,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/openbb-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Root endpoint with service information."
      },
      {
        "lineno": 822,
        "method": "DELETE",
        "path": "/data/cleanup",
        "response_model": null,
        "source": "services/openbb-connector/routers/openbb_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Clean Up Data"
      },
      {
        "lineno": 723,
        "method": "POST",
        "path": "/data/quality-check",
        "response_model": "DataQualityReport",
        "source": "services/openbb-connector/routers/openbb_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Check Data Quality"
      },
      {
        "lineno": 34,
        "method": "GET",
        "path": "/healthz",
        "response_model": "HealthResponse",
        "source": "services/openbb-connector/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health Check"
      },
      {
        "lineno": 131,
        "method": "GET",
        "path": "/info",
        "response_model": "Dict[str, Any]",
        "source": "services/openbb-connector/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service Information"
      },
      {
        "lineno": 289,
        "method": "POST",
        "path": "/legacy/import",
        "response_model": null,
        "source": "services/openbb-connector/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/prices/fetch instead."
      },
      {
        "lineno": 666,
        "method": "GET",
        "path": "/market/status",
        "response_model": "MarketStatus",
        "source": "services/openbb-connector/routers/openbb_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Market Status"
      },
      {
        "lineno": 339,
        "method": "GET",
        "path": "/prices",
        "response_model": "PaginatedResponse[PriceData]",
        "source": "services/openbb-connector/routers/openbb_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Price Data"
      },
      {
        "lineno": 226,
        "method": "POST",
        "path": "/prices/fetch",
        "response_model": "DataImportResult",
        "source": "services/openbb-connector/routers/openbb_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Fetch Price Data"
      },
      {
        "lineno": 55,
        "method": "GET",
        "path": "/readyz",
        "response_model": "ReadyResponse",
        "source": "services/openbb-connector/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness Check"
      },
      {
        "lineno": 583,
        "method": "GET",
        "path": "/statistics",
        "response_model": "OpenBBStatistics",
        "source": "services/openbb-connector/routers/openbb_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get OpenBB Statistics"
      },
      {
        "lineno": 517,
        "method": "GET",
        "path": "/symbols",
        "response_model": "PaginatedResponse[str]",
        "source": "services/openbb-connector/routers/openbb_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List Available Symbols"
      },
      {
        "lineno": 440,
        "method": "GET",
        "path": "/symbols/{symbol}",
        "response_model": "SymbolInfo",
        "source": "services/openbb-connector/routers/openbb_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Symbol Information"
      }
    ],
    "ops-controller": [
      {
        "lineno": 147,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/ops-controller/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service root information."
      },
      {
        "lineno": 494,
        "method": "GET",
        "path": "/api/system/performance",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get detailed system performance metrics."
      },
      {
        "lineno": 280,
        "method": "GET",
        "path": "/api/verification/health",
        "response_model": "OrchestrationHealthResponse",
        "source": "services/ops-controller/verification_api.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get health status of all orchestration components."
      },
      {
        "lineno": 250,
        "method": "POST",
        "path": "/api/verification/session-complete",
        "response_model": null,
        "source": "services/ops-controller/verification_api.py",
        "status_codes": [
          "200"
        ],
        "summary": "Endpoint called by n8n workflow when verification is complete."
      },
      {
        "lineno": 182,
        "method": "DELETE",
        "path": "/api/verification/session/{session_id}",
        "response_model": null,
        "source": "services/ops-controller/verification_api.py",
        "status_codes": [
          "200"
        ],
        "summary": "Cancel and cleanup a verification session."
      },
      {
        "lineno": 157,
        "method": "GET",
        "path": "/api/verification/sessions",
        "response_model": null,
        "source": "services/ops-controller/verification_api.py",
        "status_codes": [
          "200"
        ],
        "summary": "List all verification sessions with optional filtering."
      },
      {
        "lineno": 56,
        "method": "POST",
        "path": "/api/verification/start",
        "response_model": "VerificationSessionResponse",
        "source": "services/ops-controller/verification_api.py",
        "status_codes": [
          "200"
        ],
        "summary": "Start a new verification session with full orchestration."
      },
      {
        "lineno": 139,
        "method": "GET",
        "path": "/api/verification/status/{session_id}",
        "response_model": "VerificationStatusResponse",
        "source": "services/ops-controller/verification_api.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get detailed status of a verification session."
      },
      {
        "lineno": 295,
        "method": "POST",
        "path": "/api/verification/trigger-demo",
        "response_model": null,
        "source": "services/ops-controller/verification_api.py",
        "status_codes": [
          "200"
        ],
        "summary": "Trigger a demonstration of the verification pipeline."
      },
      {
        "lineno": 207,
        "method": "POST",
        "path": "/api/verification/webhook/{session_id}",
        "response_model": null,
        "source": "services/ops-controller/verification_api.py",
        "status_codes": [
          "200"
        ],
        "summary": "Webhook endpoint for receiving updates from orchestration tools."
      },
      {
        "lineno": 140,
        "method": "GET",
        "path": "/health/comprehensive",
        "response_model": null,
        "source": "services/ops-controller/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy comprehensive health endpoint. Use /v1/health/comprehensive instead."
      },
      {
        "lineno": 422,
        "method": "GET",
        "path": "/health/comprehensive",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Comprehensive health check with performance metrics."
      },
      {
        "lineno": 98,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/ops-controller/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy health endpoint. Use /healthz instead."
      },
      {
        "lineno": 15,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/ops-controller/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Liveness probe - returns OK if service is running."
      },
      {
        "lineno": 75,
        "method": "GET",
        "path": "/info",
        "response_model": null,
        "source": "services/ops-controller/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and capabilities."
      },
      {
        "lineno": 104,
        "method": "GET",
        "path": "/ops/stacks",
        "response_model": null,
        "source": "services/ops-controller/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy ops stacks endpoint. Use /v1/stacks instead."
      },
      {
        "lineno": 107,
        "method": "GET",
        "path": "/ops/stacks",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 122,
        "method": "POST",
        "path": "/ops/stacks/{name}/down",
        "response_model": null,
        "source": "services/ops-controller/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy stack down endpoint. Use /v1/stacks/{name}/down instead."
      },
      {
        "lineno": 138,
        "method": "POST",
        "path": "/ops/stacks/{name}/down",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 182,
        "method": "GET",
        "path": "/ops/stacks/{name}/logs",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 128,
        "method": "POST",
        "path": "/ops/stacks/{name}/restart",
        "response_model": null,
        "source": "services/ops-controller/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy stack restart endpoint. Use /v1/stacks/{name}/restart instead."
      },
      {
        "lineno": 152,
        "method": "POST",
        "path": "/ops/stacks/{name}/restart",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 166,
        "method": "POST",
        "path": "/ops/stacks/{name}/scale",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 110,
        "method": "GET",
        "path": "/ops/stacks/{name}/status",
        "response_model": null,
        "source": "services/ops-controller/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy stack status endpoint. Use /v1/stacks/{name}/status instead."
      },
      {
        "lineno": 112,
        "method": "GET",
        "path": "/ops/stacks/{name}/status",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 116,
        "method": "POST",
        "path": "/ops/stacks/{name}/up",
        "response_model": null,
        "source": "services/ops-controller/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy stack up endpoint. Use /v1/stacks/{name}/up instead."
      },
      {
        "lineno": 124,
        "method": "POST",
        "path": "/ops/stacks/{name}/up",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 21,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/ops-controller/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness probe - checks if service can handle requests."
      },
      {
        "lineno": 230,
        "method": "GET",
        "path": "/security/containers/status",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get container security status."
      },
      {
        "lineno": 361,
        "method": "POST",
        "path": "/security/containers/{container_id}/restart",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Restart a specific container."
      },
      {
        "lineno": 382,
        "method": "POST",
        "path": "/security/containers/{container_id}/stop",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Stop a specific container."
      },
      {
        "lineno": 341,
        "method": "POST",
        "path": "/security/data-wipe/{category_id}",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Wipe a specific data category."
      },
      {
        "lineno": 402,
        "method": "POST",
        "path": "/security/emergency-shutdown",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Emergency shutdown with secure data wiping."
      },
      {
        "lineno": 244,
        "method": "POST",
        "path": "/security/incognito/start",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Start a new incognito session."
      },
      {
        "lineno": 134,
        "method": "GET",
        "path": "/security/incognito/status",
        "response_model": null,
        "source": "services/ops-controller/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy incognito status endpoint. Use /v1/security/incognito/status instead."
      },
      {
        "lineno": 206,
        "method": "GET",
        "path": "/security/incognito/status",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get current incognito mode status."
      },
      {
        "lineno": 314,
        "method": "GET",
        "path": "/security/incognito/{session_id}/containers",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get containers for a specific incognito session."
      },
      {
        "lineno": 328,
        "method": "GET",
        "path": "/security/incognito/{session_id}/data-scan",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Scan data categories for a session."
      },
      {
        "lineno": 269,
        "method": "POST",
        "path": "/security/incognito/{session_id}/stop",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Stop an incognito session."
      },
      {
        "lineno": 290,
        "method": "POST",
        "path": "/security/incognito/{session_id}/wipe",
        "response_model": null,
        "source": "services/ops-controller/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Wipe all data for an incognito session."
      },
      {
        "lineno": 527,
        "method": "GET",
        "path": "/v1/health/comprehensive",
        "response_model": "ComprehensiveHealthResponse",
        "source": "services/ops-controller/routers/ops_controller_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Comprehensive health check with performance metrics."
      },
      {
        "lineno": 612,
        "method": "GET",
        "path": "/v1/performance",
        "response_model": "SystemPerformanceResponse",
        "source": "services/ops-controller/routers/ops_controller_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get detailed system performance metrics."
      },
      {
        "lineno": 465,
        "method": "POST",
        "path": "/v1/security/incognito/start",
        "response_model": "IncognitoSessionResponse",
        "source": "services/ops-controller/routers/ops_controller_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Start a new incognito session."
      },
      {
        "lineno": 431,
        "method": "GET",
        "path": "/v1/security/incognito/status",
        "response_model": "IncognitoStatusResponse",
        "source": "services/ops-controller/routers/ops_controller_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get current incognito mode status."
      },
      {
        "lineno": 496,
        "method": "POST",
        "path": "/v1/security/incognito/{session_id}/stop",
        "response_model": "WipeResponse",
        "source": "services/ops-controller/routers/ops_controller_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Stop an incognito session."
      },
      {
        "lineno": 181,
        "method": "GET",
        "path": "/v1/stacks",
        "response_model": "StackListResponse",
        "source": "services/ops-controller/routers/ops_controller_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List available service stacks."
      },
      {
        "lineno": 263,
        "method": "POST",
        "path": "/v1/stacks/{name}/down",
        "response_model": "StackOperationResponse",
        "source": "services/ops-controller/routers/ops_controller_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Stop a service stack."
      },
      {
        "lineno": 376,
        "method": "GET",
        "path": "/v1/stacks/{name}/logs",
        "response_model": null,
        "source": "services/ops-controller/routers/ops_controller_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Stream logs from a service stack."
      },
      {
        "lineno": 298,
        "method": "POST",
        "path": "/v1/stacks/{name}/restart",
        "response_model": "StackOperationResponse",
        "source": "services/ops-controller/routers/ops_controller_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Restart a service stack."
      },
      {
        "lineno": 333,
        "method": "POST",
        "path": "/v1/stacks/{name}/scale",
        "response_model": "ScaleResponse",
        "source": "services/ops-controller/routers/ops_controller_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Scale a service within a stack."
      },
      {
        "lineno": 198,
        "method": "GET",
        "path": "/v1/stacks/{name}/status",
        "response_model": "StackStatusResponse",
        "source": "services/ops-controller/routers/ops_controller_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get status of a specific stack."
      },
      {
        "lineno": 228,
        "method": "POST",
        "path": "/v1/stacks/{name}/up",
        "response_model": "StackOperationResponse",
        "source": "services/ops-controller/routers/ops_controller_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Start a service stack."
      }
    ],
    "performance-monitor": [
      {
        "lineno": 135,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/performance-monitor/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service root information."
      },
      {
        "lineno": 555,
        "method": "GET",
        "path": "/alerts",
        "response_model": null,
        "source": "services/performance-monitor/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get recent performance alerts"
      },
      {
        "lineno": 116,
        "method": "GET",
        "path": "/alerts",
        "response_model": null,
        "source": "services/performance-monitor/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy alerts endpoint. Use /v1/alerts instead."
      },
      {
        "lineno": 567,
        "method": "GET",
        "path": "/health",
        "response_model": null,
        "source": "services/performance-monitor/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health check endpoint"
      },
      {
        "lineno": 128,
        "method": "GET",
        "path": "/health",
        "response_model": null,
        "source": "services/performance-monitor/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy health endpoint. Use /v1/health/status instead."
      },
      {
        "lineno": 98,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/performance-monitor/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy health endpoint. Use /healthz instead."
      },
      {
        "lineno": 14,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/performance-monitor/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Liveness probe - returns OK if service is running."
      },
      {
        "lineno": 81,
        "method": "GET",
        "path": "/info",
        "response_model": null,
        "source": "services/performance-monitor/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and capabilities."
      },
      {
        "lineno": 532,
        "method": "POST",
        "path": "/metrics",
        "response_model": null,
        "source": "services/performance-monitor/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Record a custom performance metric"
      },
      {
        "lineno": 104,
        "method": "POST",
        "path": "/metrics",
        "response_model": null,
        "source": "services/performance-monitor/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy metrics endpoint. Use /v1/metrics instead."
      },
      {
        "lineno": 549,
        "method": "GET",
        "path": "/metrics/{service_name}/summary",
        "response_model": "ServiceSummaryResponse",
        "source": "services/performance-monitor/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get performance summary for a service"
      },
      {
        "lineno": 110,
        "method": "GET",
        "path": "/metrics/{service_name}/summary",
        "response_model": null,
        "source": "services/performance-monitor/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy service summary endpoint. Use /v1/services/{service_name}/summary instead."
      },
      {
        "lineno": 561,
        "method": "GET",
        "path": "/metrics/{service_name}/{metric_type}",
        "response_model": null,
        "source": "services/performance-monitor/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get recent metrics for a service and metric type"
      },
      {
        "lineno": 122,
        "method": "GET",
        "path": "/metrics/{service_name}/{metric_type}",
        "response_model": null,
        "source": "services/performance-monitor/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy service metrics endpoint. Use /v1/services/{service_name}/metrics/{metric_type} instead."
      },
      {
        "lineno": 20,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/performance-monitor/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness probe - checks if service can handle requests."
      },
      {
        "lineno": 411,
        "method": "GET",
        "path": "/v1/alerts",
        "response_model": "AlertsResponse",
        "source": "services/performance-monitor/routers/performance_monitor_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get recent performance alerts."
      },
      {
        "lineno": 537,
        "method": "GET",
        "path": "/v1/health/status",
        "response_model": null,
        "source": "services/performance-monitor/routers/performance_monitor_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get performance monitor health status."
      },
      {
        "lineno": 363,
        "method": "POST",
        "path": "/v1/metrics",
        "response_model": "MetricRecordResponse",
        "source": "services/performance-monitor/routers/performance_monitor_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Record a custom performance metric."
      },
      {
        "lineno": 490,
        "method": "GET",
        "path": "/v1/services",
        "response_model": "PaginatedResponse",
        "source": "services/performance-monitor/routers/performance_monitor_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List all monitored services."
      },
      {
        "lineno": 431,
        "method": "GET",
        "path": "/v1/services/{service_name}/metrics/{metric_type}",
        "response_model": "MetricsResponse",
        "source": "services/performance-monitor/routers/performance_monitor_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get recent metrics for a service and metric type."
      },
      {
        "lineno": 393,
        "method": "GET",
        "path": "/v1/services/{service_name}/summary",
        "response_model": "ServiceSummaryResponse",
        "source": "services/performance-monitor/routers/performance_monitor_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get performance summary for a service."
      },
      {
        "lineno": 456,
        "method": "GET",
        "path": "/v1/system/metrics",
        "response_model": "SystemMetrics",
        "source": "services/performance-monitor/routers/performance_monitor_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get current system performance metrics."
      }
    ],
    "plugin-runner": [
      {
        "lineno": 421,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/plugin-runner/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Root endpoint with service information."
      },
      {
        "lineno": 120,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/plugin-runner/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Root endpoint explaining deprecation."
      },
      {
        "lineno": 736,
        "method": "GET",
        "path": "/capabilities",
        "response_model": "PluginCapabilities",
        "source": "services/plugin-runner/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get System Capabilities"
      },
      {
        "lineno": 109,
        "method": "GET",
        "path": "/categories",
        "response_model": null,
        "source": "services/plugin-runner/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/categories instead."
      },
      {
        "lineno": 601,
        "method": "GET",
        "path": "/categories",
        "response_model": "List[PluginCategory]",
        "source": "services/plugin-runner/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Plugin Categories"
      },
      {
        "lineno": 401,
        "method": "POST",
        "path": "/execute",
        "response_model": null,
        "source": "services/plugin-runner/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/plugins/{plugin_name}/execute instead."
      },
      {
        "lineno": 89,
        "method": "POST",
        "path": "/execute",
        "response_model": null,
        "source": "services/plugin-runner/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/plugins/{plugin_name}/execute instead."
      },
      {
        "lineno": 384,
        "method": "GET",
        "path": "/health",
        "response_model": null,
        "source": "services/plugin-runner/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /healthz instead."
      },
      {
        "lineno": 74,
        "method": "GET",
        "path": "/health",
        "response_model": null,
        "source": "services/plugin-runner/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /healthz instead."
      },
      {
        "lineno": 787,
        "method": "GET",
        "path": "/health",
        "response_model": "PluginHealthStatus",
        "source": "services/plugin-runner/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Plugin System Health"
      },
      {
        "lineno": 64,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/plugin-runner/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health check - redirects to new implementation."
      },
      {
        "lineno": 34,
        "method": "GET",
        "path": "/healthz",
        "response_model": "HealthResponse",
        "source": "services/plugin-runner/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health Check"
      },
      {
        "lineno": 122,
        "method": "GET",
        "path": "/info",
        "response_model": "Dict[str, Any]",
        "source": "services/plugin-runner/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service Information"
      },
      {
        "lineno": 99,
        "method": "GET",
        "path": "/jobs",
        "response_model": null,
        "source": "services/plugin-runner/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/jobs instead."
      },
      {
        "lineno": 438,
        "method": "GET",
        "path": "/jobs",
        "response_model": "PaginatedResponse[JobStatus]",
        "source": "services/plugin-runner/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List Jobs"
      },
      {
        "lineno": 104,
        "method": "DELETE",
        "path": "/jobs/{job_id}",
        "response_model": null,
        "source": "services/plugin-runner/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/jobs/{job_id} instead."
      },
      {
        "lineno": 549,
        "method": "DELETE",
        "path": "/jobs/{job_id}",
        "response_model": "Dict[str, Any]",
        "source": "services/plugin-runner/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Cancel Job"
      },
      {
        "lineno": 410,
        "method": "GET",
        "path": "/jobs/{job_id}",
        "response_model": null,
        "source": "services/plugin-runner/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/jobs/{job_id} instead."
      },
      {
        "lineno": 94,
        "method": "GET",
        "path": "/jobs/{job_id}",
        "response_model": null,
        "source": "services/plugin-runner/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/jobs/{job_id} instead."
      },
      {
        "lineno": 501,
        "method": "GET",
        "path": "/jobs/{job_id}",
        "response_model": "PluginExecutionResponse",
        "source": "services/plugin-runner/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Job Status"
      },
      {
        "lineno": 392,
        "method": "GET",
        "path": "/plugins",
        "response_model": null,
        "source": "services/plugin-runner/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/plugins instead."
      },
      {
        "lineno": 79,
        "method": "GET",
        "path": "/plugins",
        "response_model": null,
        "source": "services/plugin-runner/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/plugins instead."
      },
      {
        "lineno": 68,
        "method": "GET",
        "path": "/plugins",
        "response_model": "PaginatedResponse[PluginInfo]",
        "source": "services/plugin-runner/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List Plugins"
      },
      {
        "lineno": 354,
        "method": "POST",
        "path": "/plugins/batch",
        "response_model": "BatchExecutionResponse",
        "source": "services/plugin-runner/routers/plugins_v1.py",
        "status_codes": [
          "202"
        ],
        "summary": "Execute Plugin Batch"
      },
      {
        "lineno": 84,
        "method": "GET",
        "path": "/plugins/{plugin_name}",
        "response_model": null,
        "source": "services/plugin-runner/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/plugins/{plugin_name} instead."
      },
      {
        "lineno": 142,
        "method": "GET",
        "path": "/plugins/{plugin_name}",
        "response_model": "PluginInfo",
        "source": "services/plugin-runner/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Plugin Details"
      },
      {
        "lineno": 263,
        "method": "POST",
        "path": "/plugins/{plugin_name}/execute",
        "response_model": "PluginExecutionResponse",
        "source": "services/plugin-runner/routers/plugins_v1.py",
        "status_codes": [
          "202"
        ],
        "summary": "Execute Plugin"
      },
      {
        "lineno": 197,
        "method": "GET",
        "path": "/plugins/{plugin_name}/health",
        "response_model": "Dict[str, Any]",
        "source": "services/plugin-runner/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Check Plugin Health"
      },
      {
        "lineno": 69,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/plugin-runner/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness check - redirects to new implementation."
      },
      {
        "lineno": 55,
        "method": "GET",
        "path": "/readyz",
        "response_model": "ReadyResponse",
        "source": "services/plugin-runner/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness Check"
      },
      {
        "lineno": 114,
        "method": "GET",
        "path": "/statistics",
        "response_model": null,
        "source": "services/plugin-runner/app.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/statistics instead."
      },
      {
        "lineno": 669,
        "method": "GET",
        "path": "/statistics",
        "response_model": "PluginStatistics",
        "source": "services/plugin-runner/routers/plugins_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get Plugin Statistics"
      }
    ],
    "rag-api": [
      {
        "lineno": 158,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/rag-api/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service root information."
      },
      {
        "lineno": 145,
        "method": "POST",
        "path": "/events/extract",
        "response_model": null,
        "source": "services/rag-api/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy event extraction endpoint. Use /v1/events/extract instead."
      },
      {
        "lineno": 211,
        "method": "POST",
        "path": "/events/extract",
        "response_model": null,
        "source": "services/rag-api/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 151,
        "method": "POST",
        "path": "/feedback/label",
        "response_model": null,
        "source": "services/rag-api/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy feedback endpoint. Use /v1/feedback instead."
      },
      {
        "lineno": 225,
        "method": "POST",
        "path": "/feedback/label",
        "response_model": null,
        "source": "services/rag-api/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 139,
        "method": "POST",
        "path": "/graph/law/upsert",
        "response_model": null,
        "source": "services/rag-api/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy graph upsert endpoint. Use /v1/graph/documents instead."
      },
      {
        "lineno": 195,
        "method": "POST",
        "path": "/graph/law/upsert",
        "response_model": null,
        "source": "services/rag-api/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Upsert a Law node and optional relations in Neo4j (LEGAL-2)."
      },
      {
        "lineno": 97,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/rag-api/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy health endpoint. Use /healthz instead."
      },
      {
        "lineno": 13,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/rag-api/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Liveness probe - returns OK if service is running."
      },
      {
        "lineno": 54,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/rag-api/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 167,
        "method": "POST",
        "path": "/index/knn/ef_search",
        "response_model": null,
        "source": "services/rag-api/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 61,
        "method": "GET",
        "path": "/info",
        "response_model": null,
        "source": "services/rag-api/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and capabilities."
      },
      {
        "lineno": 127,
        "method": "GET",
        "path": "/law/context",
        "response_model": null,
        "source": "services/rag-api/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy context search endpoint. Use /v1/entities/{entity}/context instead."
      },
      {
        "lineno": 174,
        "method": "GET",
        "path": "/law/context",
        "response_model": "ContextResponse",
        "source": "services/rag-api/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Return relevant laws for an entity. Tries graph links; falls back to text retrieval by entity name."
      },
      {
        "lineno": 121,
        "method": "POST",
        "path": "/law/hybrid",
        "response_model": null,
        "source": "services/rag-api/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy hybrid search endpoint. Use /v1/documents/hybrid instead."
      },
      {
        "lineno": 132,
        "method": "POST",
        "path": "/law/hybrid",
        "response_model": "RetrieveResponse",
        "source": "services/rag-api/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 133,
        "method": "POST",
        "path": "/law/index",
        "response_model": null,
        "source": "services/rag-api/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy indexing endpoint. Use /v1/documents instead."
      },
      {
        "lineno": 186,
        "method": "POST",
        "path": "/law/index",
        "response_model": null,
        "source": "services/rag-api/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Index a law paragraph into OpenSearch (idempotent upsert)."
      },
      {
        "lineno": 109,
        "method": "GET",
        "path": "/law/knn",
        "response_model": null,
        "source": "services/rag-api/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy KNN search endpoint. Use /v1/documents/knn instead."
      },
      {
        "lineno": 106,
        "method": "GET",
        "path": "/law/knn",
        "response_model": "RetrieveResponse",
        "source": "services/rag-api/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 115,
        "method": "POST",
        "path": "/law/knn_vector",
        "response_model": null,
        "source": "services/rag-api/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy KNN vector search endpoint. Use /v1/documents/knn/vector instead."
      },
      {
        "lineno": 118,
        "method": "POST",
        "path": "/law/knn_vector",
        "response_model": "RetrieveResponse",
        "source": "services/rag-api/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 103,
        "method": "GET",
        "path": "/law/retrieve",
        "response_model": null,
        "source": "services/rag-api/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy law retrieval endpoint. Use /v1/documents/search instead."
      },
      {
        "lineno": 92,
        "method": "GET",
        "path": "/law/retrieve",
        "response_model": "RetrieveResponse",
        "source": "services/rag-api/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Retrieve relevant law paragraphs from OpenSearch index."
      },
      {
        "lineno": 19,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/rag-api/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness probe - checks if service can handle requests."
      },
      {
        "lineno": 59,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/rag-api/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 374,
        "method": "GET",
        "path": "/v1/documents",
        "response_model": "PaginatedResponse",
        "source": "services/rag-api/routers/rag_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "List indexed documents with pagination and filtering."
      },
      {
        "lineno": 243,
        "method": "POST",
        "path": "/v1/documents",
        "response_model": "IndexResponse",
        "source": "services/rag-api/routers/rag_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Index a law document into the search index."
      },
      {
        "lineno": 166,
        "method": "POST",
        "path": "/v1/documents/hybrid",
        "response_model": "RetrieveResponse",
        "source": "services/rag-api/routers/rag_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Perform hybrid search combining BM25 text search and KNN vector search."
      },
      {
        "lineno": 131,
        "method": "GET",
        "path": "/v1/documents/knn",
        "response_model": "RetrieveResponse",
        "source": "services/rag-api/routers/rag_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Search for documents using K-nearest neighbor vector search."
      },
      {
        "lineno": 150,
        "method": "POST",
        "path": "/v1/documents/knn/vector",
        "response_model": "RetrieveResponse",
        "source": "services/rag-api/routers/rag_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Search for documents using a provided vector."
      },
      {
        "lineno": 99,
        "method": "GET",
        "path": "/v1/documents/search",
        "response_model": "RetrieveResponse",
        "source": "services/rag-api/routers/rag_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Search for relevant law documents using text search."
      },
      {
        "lineno": 216,
        "method": "GET",
        "path": "/v1/entities/{entity}/context",
        "response_model": "ContextResponse",
        "source": "services/rag-api/routers/rag_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get relevant laws for an entity using graph relationships."
      },
      {
        "lineno": 295,
        "method": "POST",
        "path": "/v1/events/extract",
        "response_model": "ExtractEventsResponse",
        "source": "services/rag-api/routers/rag_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Extract events from text using pattern matching."
      },
      {
        "lineno": 332,
        "method": "POST",
        "path": "/v1/feedback",
        "response_model": "FeedbackResponse",
        "source": "services/rag-api/routers/rag_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Submit feedback/labels for improving search quality."
      },
      {
        "lineno": 263,
        "method": "POST",
        "path": "/v1/graph/documents",
        "response_model": "GraphUpsertResponse",
        "source": "services/rag-api/routers/rag_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Upsert a law document and its relationships into the graph database."
      },
      {
        "lineno": 356,
        "method": "POST",
        "path": "/v1/index/knn/ef_search",
        "response_model": null,
        "source": "services/rag-api/routers/rag_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Update ef_search parameter for HNSW index optimization."
      },
      {
        "lineno": 419,
        "method": "GET",
        "path": "/v1/stats",
        "response_model": null,
        "source": "services/rag-api/routers/rag_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get service statistics and index information."
      }
    ],
    "search-api": [
      {
        "lineno": 812,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/search-api/src/search_api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and available endpoints."
      },
      {
        "lineno": 114,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/search-api/src/search_api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health check endpoint (legacy response schema)."
      },
      {
        "lineno": 779,
        "method": "POST",
        "path": "/query",
        "response_model": null,
        "source": "services/search-api/src/search_api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/search instead."
      },
      {
        "lineno": 120,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/search-api/src/search_api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness check endpoint with legacy response schema."
      },
      {
        "lineno": 715,
        "method": "GET",
        "path": "/search",
        "response_model": null,
        "source": "services/search-api/src/search_api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/search instead."
      },
      {
        "lineno": 716,
        "method": "POST",
        "path": "/search",
        "response_model": null,
        "source": "services/search-api/src/search_api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "DEPRECATED: Use /v1/search instead."
      },
      {
        "lineno": 601,
        "method": "DELETE",
        "path": "/v1/documents/{doc_id}",
        "response_model": null,
        "source": "services/search-api/src/search_api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Delete document by ID"
      },
      {
        "lineno": 538,
        "method": "GET",
        "path": "/v1/documents/{doc_id}",
        "response_model": "DocumentResponse",
        "source": "services/search-api/src/search_api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get document by ID"
      },
      {
        "lineno": 449,
        "method": "POST",
        "path": "/v1/index/documents",
        "response_model": "IndexResponse",
        "source": "services/search-api/src/search_api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Index documents"
      },
      {
        "lineno": 261,
        "method": "POST",
        "path": "/v1/search",
        "response_model": "PaginatedResponse[SearchResult]",
        "source": "services/search-api/src/search_api/app/main_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Search documents"
      }
    ],
    "verification": [
      {
        "lineno": 127,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/verification/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service root information."
      },
      {
        "lineno": 96,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/verification/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy health endpoint. Use /healthz instead."
      },
      {
        "lineno": 238,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/verification/app_legacy.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health check endpoint."
      },
      {
        "lineno": 17,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/verification/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Liveness probe - returns OK if service is running."
      },
      {
        "lineno": 71,
        "method": "GET",
        "path": "/info",
        "response_model": null,
        "source": "services/verification/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and capabilities."
      },
      {
        "lineno": 23,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/verification/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness probe - checks if service can handle requests."
      },
      {
        "lineno": 134,
        "method": "POST",
        "path": "/v1/claims/batch",
        "response_model": "BatchClaimsResponse",
        "source": "services/verification/routers/verification_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Extract claims from multiple texts in batch."
      },
      {
        "lineno": 111,
        "method": "POST",
        "path": "/v1/claims/extract",
        "response_model": "List[ClaimResponse]",
        "source": "services/verification/routers/verification_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Extract verifiable claims from text."
      },
      {
        "lineno": 228,
        "method": "POST",
        "path": "/v1/credibility/assess",
        "response_model": "CredibilityResponse",
        "source": "services/verification/routers/verification_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Assess the credibility of a source."
      },
      {
        "lineno": 190,
        "method": "POST",
        "path": "/v1/evidence/find",
        "response_model": "List[EvidenceResponse]",
        "source": "services/verification/routers/verification_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Find evidence for a claim from multiple sources."
      },
      {
        "lineno": 247,
        "method": "POST",
        "path": "/v1/media/analyze",
        "response_model": "MediaAnalysisResponse",
        "source": "services/verification/routers/verification_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Analyze media for forensic information."
      },
      {
        "lineno": 281,
        "method": "POST",
        "path": "/v1/media/compare",
        "response_model": "ImageSimilarityResponse",
        "source": "services/verification/routers/verification_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Compare two media files for similarity."
      },
      {
        "lineno": 332,
        "method": "POST",
        "path": "/v1/pipeline/verify",
        "response_model": "Dict[str, Any]",
        "source": "services/verification/routers/verification_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Complete verification pipeline for text."
      },
      {
        "lineno": 410,
        "method": "GET",
        "path": "/v1/sources",
        "response_model": "Dict[str, Any]",
        "source": "services/verification/routers/verification_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get available evidence sources and their status."
      },
      {
        "lineno": 209,
        "method": "POST",
        "path": "/v1/stance/classify",
        "response_model": "StanceResponse",
        "source": "services/verification/routers/verification_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Classify stance between a claim and evidence."
      },
      {
        "lineno": 314,
        "method": "GET",
        "path": "/v1/stats",
        "response_model": "VerificationStatsResponse",
        "source": "services/verification/routers/verification_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get verification service statistics."
      },
      {
        "lineno": 102,
        "method": "POST",
        "path": "/verify/extract-claims",
        "response_model": null,
        "source": "services/verification/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy claim extraction endpoint. Use /v1/claims/extract instead."
      },
      {
        "lineno": 257,
        "method": "POST",
        "path": "/verify/extract-claims",
        "response_model": "List[ClaimResponse]",
        "source": "services/verification/app_legacy.py",
        "status_codes": [
          "200"
        ],
        "summary": "Extract verifiable claims from text."
      },
      {
        "lineno": 108,
        "method": "POST",
        "path": "/verify/image",
        "response_model": null,
        "source": "services/verification/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy image verification endpoint. Use /v1/media/analyze instead."
      },
      {
        "lineno": 310,
        "method": "POST",
        "path": "/verify/image",
        "response_model": "MediaAnalysisResponse",
        "source": "services/verification/app_legacy.py",
        "status_codes": [
          "200"
        ],
        "summary": "Analyze uploaded image for forensic indicators and metadata."
      },
      {
        "lineno": 114,
        "method": "POST",
        "path": "/verify/image-similarity",
        "response_model": null,
        "source": "services/verification/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy image similarity endpoint. Use /v1/media/compare instead."
      },
      {
        "lineno": 382,
        "method": "POST",
        "path": "/verify/image-similarity",
        "response_model": null,
        "source": "services/verification/app_legacy.py",
        "status_codes": [
          "200"
        ],
        "summary": "Compare two images for similarity using perceptual hashing."
      },
      {
        "lineno": 120,
        "method": "GET",
        "path": "/verify/stats",
        "response_model": null,
        "source": "services/verification/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy stats endpoint. Use /v1/stats instead."
      },
      {
        "lineno": 461,
        "method": "GET",
        "path": "/verify/stats",
        "response_model": null,
        "source": "services/verification/app_legacy.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get verification service statistics."
      }
    ],
    "websocket-manager": [
      {
        "lineno": 587,
        "method": "POST",
        "path": "/broadcast",
        "response_model": null,
        "source": "services/websocket-manager/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Broadcast message via REST API"
      },
      {
        "lineno": 118,
        "method": "POST",
        "path": "/broadcast",
        "response_model": null,
        "source": "services/websocket-manager/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/broadcast instead"
      },
      {
        "lineno": 154,
        "method": "POST",
        "path": "/broadcast",
        "response_model": "BroadcastResponse",
        "source": "services/websocket-manager/routers/websocket_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Broadcast a message to WebSocket clients via REST API."
      },
      {
        "lineno": 186,
        "method": "POST",
        "path": "/broadcast/bulk",
        "response_model": "BulkBroadcastResponse",
        "source": "services/websocket-manager/routers/websocket_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Broadcast multiple messages in a single operation."
      },
      {
        "lineno": 641,
        "method": "POST",
        "path": "/broadcast/entity-discovered",
        "response_model": null,
        "source": "services/websocket-manager/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Broadcast new entity discovery"
      },
      {
        "lineno": 142,
        "method": "POST",
        "path": "/broadcast/entity-discovered",
        "response_model": null,
        "source": "services/websocket-manager/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/broadcast/entity-discovered instead"
      },
      {
        "lineno": 286,
        "method": "POST",
        "path": "/broadcast/entity-discovered",
        "response_model": "BroadcastResponse",
        "source": "services/websocket-manager/routers/websocket_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Broadcast new entity discovery notifications."
      },
      {
        "lineno": 604,
        "method": "POST",
        "path": "/broadcast/plugin-status",
        "response_model": null,
        "source": "services/websocket-manager/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Broadcast plugin execution status"
      },
      {
        "lineno": 130,
        "method": "POST",
        "path": "/broadcast/plugin-status",
        "response_model": null,
        "source": "services/websocket-manager/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/broadcast/plugin-status instead"
      },
      {
        "lineno": 241,
        "method": "POST",
        "path": "/broadcast/plugin-status",
        "response_model": "BroadcastResponse",
        "source": "services/websocket-manager/routers/websocket_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Broadcast plugin execution status updates."
      },
      {
        "lineno": 667,
        "method": "POST",
        "path": "/broadcast/system-alert",
        "response_model": null,
        "source": "services/websocket-manager/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Broadcast system alert"
      },
      {
        "lineno": 154,
        "method": "POST",
        "path": "/broadcast/system-alert",
        "response_model": null,
        "source": "services/websocket-manager/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/broadcast/system-alert instead"
      },
      {
        "lineno": 319,
        "method": "POST",
        "path": "/broadcast/system-alert",
        "response_model": "BroadcastResponse",
        "source": "services/websocket-manager/routers/websocket_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Broadcast system alerts and notifications."
      },
      {
        "lineno": 352,
        "method": "POST",
        "path": "/channels/subscribe",
        "response_model": "Dict[str, Any]",
        "source": "services/websocket-manager/routers/websocket_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Subscribe or unsubscribe client from channels."
      },
      {
        "lineno": 428,
        "method": "GET",
        "path": "/clients",
        "response_model": "ActiveClientsResponse",
        "source": "services/websocket-manager/routers/websocket_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get list of active WebSocket clients with filtering options."
      },
      {
        "lineno": 639,
        "method": "POST",
        "path": "/clients/{client_id}/disconnect",
        "response_model": null,
        "source": "services/websocket-manager/routers/websocket_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Forcefully disconnect a WebSocket client."
      },
      {
        "lineno": 665,
        "method": "POST",
        "path": "/collaboration/event",
        "response_model": "BroadcastResponse",
        "source": "services/websocket-manager/routers/websocket_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Broadcast collaboration events for real-time features."
      },
      {
        "lineno": 696,
        "method": "GET",
        "path": "/health",
        "response_model": null,
        "source": "services/websocket-manager/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Health check endpoint"
      },
      {
        "lineno": 178,
        "method": "GET",
        "path": "/health",
        "response_model": null,
        "source": "services/websocket-manager/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /healthz instead"
      },
      {
        "lineno": 589,
        "method": "GET",
        "path": "/health",
        "response_model": "HealthStatus",
        "source": "services/websocket-manager/routers/websocket_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get comprehensive WebSocket manager health status."
      },
      {
        "lineno": 13,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/websocket-manager/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Liveness probe - returns OK if service is running."
      },
      {
        "lineno": 84,
        "method": "GET",
        "path": "/info",
        "response_model": null,
        "source": "services/websocket-manager/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and capabilities."
      },
      {
        "lineno": 469,
        "method": "GET",
        "path": "/investigations",
        "response_model": "InvestigationRoomsResponse",
        "source": "services/websocket-manager/routers/websocket_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get list of active investigation rooms."
      },
      {
        "lineno": 386,
        "method": "POST",
        "path": "/investigations/manage",
        "response_model": "Dict[str, Any]",
        "source": "services/websocket-manager/routers/websocket_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Join or leave investigation rooms."
      },
      {
        "lineno": 697,
        "method": "DELETE",
        "path": "/offline-messages/{user_id}",
        "response_model": null,
        "source": "services/websocket-manager/routers/websocket_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Clear queued offline messages for a user."
      },
      {
        "lineno": 19,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/websocket-manager/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness probe - checks if service can handle requests."
      },
      {
        "lineno": 691,
        "method": "GET",
        "path": "/stats",
        "response_model": null,
        "source": "services/websocket-manager/main.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get WebSocket manager statistics"
      },
      {
        "lineno": 166,
        "method": "GET",
        "path": "/stats",
        "response_model": null,
        "source": "services/websocket-manager/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy endpoint - use /v1/stats instead"
      },
      {
        "lineno": 508,
        "method": "GET",
        "path": "/stats",
        "response_model": "WebSocketStats",
        "source": "services/websocket-manager/routers/websocket_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get basic WebSocket manager statistics."
      },
      {
        "lineno": 529,
        "method": "GET",
        "path": "/stats/detailed",
        "response_model": "DetailedStatsResponse",
        "source": "services/websocket-manager/routers/websocket_manager_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get comprehensive WebSocket manager statistics."
      }
    ],
    "xai": [
      {
        "lineno": 116,
        "method": "GET",
        "path": "/",
        "response_model": null,
        "source": "services/xai/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service root information."
      },
      {
        "lineno": 103,
        "method": "POST",
        "path": "/explain/text",
        "response_model": null,
        "source": "services/xai/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy text explanation endpoint. Use /v1/explain/text instead."
      },
      {
        "lineno": 21,
        "method": "POST",
        "path": "/explain/text",
        "response_model": null,
        "source": "services/xai/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 97,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/xai/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy health endpoint. Use /healthz instead."
      },
      {
        "lineno": 13,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/xai/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Liveness probe - returns OK if service is running."
      },
      {
        "lineno": 16,
        "method": "GET",
        "path": "/healthz",
        "response_model": null,
        "source": "services/xai/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 79,
        "method": "GET",
        "path": "/info",
        "response_model": null,
        "source": "services/xai/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Service information and capabilities."
      },
      {
        "lineno": 109,
        "method": "GET",
        "path": "/model-card",
        "response_model": null,
        "source": "services/xai/app_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Legacy model card endpoint. Use /v1/model-card instead."
      },
      {
        "lineno": 47,
        "method": "GET",
        "path": "/model-card",
        "response_model": null,
        "source": "services/xai/app/main.py",
        "status_codes": [
          "200"
        ],
        "summary": null
      },
      {
        "lineno": 19,
        "method": "GET",
        "path": "/readyz",
        "response_model": null,
        "source": "services/xai/routers/core_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Readiness probe - checks if service can handle requests."
      },
      {
        "lineno": 424,
        "method": "GET",
        "path": "/v1/capabilities",
        "response_model": "ServiceCapabilities",
        "source": "services/xai/routers/xai_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get service capabilities and configuration."
      },
      {
        "lineno": 451,
        "method": "POST",
        "path": "/v1/explain/batch",
        "response_model": "PaginatedResponse",
        "source": "services/xai/routers/xai_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Explain multiple texts in batch."
      },
      {
        "lineno": 259,
        "method": "POST",
        "path": "/v1/explain/compare",
        "response_model": "ExplanationComparison",
        "source": "services/xai/routers/xai_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Compare multiple explanation methods on the same text."
      },
      {
        "lineno": 220,
        "method": "POST",
        "path": "/v1/explain/text",
        "response_model": "TextExplanationResponse",
        "source": "services/xai/routers/xai_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Explain text with token-level highlighting."
      },
      {
        "lineno": 499,
        "method": "GET",
        "path": "/v1/methods",
        "response_model": null,
        "source": "services/xai/routers/xai_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get available explanation methods and their descriptions."
      },
      {
        "lineno": 333,
        "method": "GET",
        "path": "/v1/model-card",
        "response_model": "ModelCard",
        "source": "services/xai/routers/xai_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get model card with transparency information."
      },
      {
        "lineno": 398,
        "method": "GET",
        "path": "/v1/stats",
        "response_model": "ExplanationStats",
        "source": "services/xai/routers/xai_v1.py",
        "status_codes": [
          "200"
        ],
        "summary": "Get explanation service statistics."
      }
    ]
  }
}
