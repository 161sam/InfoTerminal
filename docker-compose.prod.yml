version: "3.9"

x-runtime-defaults: &runtime_defaults
  security_opt:
    - "no-new-privileges:true"
    - "seccomp=./security/runtime/seccomp/infoterminal-default.json"
    - "apparmor:docker-default"
  cap_drop:
    - ALL
  cap_add:
    - CHOWN
    - DAC_OVERRIDE
    - FOWNER
    - NET_BIND_SERVICE
    - SETGID
    - SETUID

services:
  gateway:
    <<: *runtime_defaults
    image: ghcr.io/infoterminal/gateway:v1.0@sha256:6f08e99775fa8fb90753c9709cbf3f1d1b9d20c92a4cf3b64db24edfcf3b8f40
    ports:
      - "${IT_PORT_GATEWAY:-8610}:8080"
    environment:
      - PORT=8080
      - SEARCH_TARGET=http://search-api:8080
      - GRAPH_TARGET=http://graph-api:8080
      - DOC_ENTITIES_TARGET=http://doc-entities:8000
      - AUTH_TARGET=http://auth-service:8080
    depends_on:
      search-api:
        condition: service_healthy
      graph-api:
        condition: service_healthy
      doc-entities:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/readyz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  it-ui:
    <<: *runtime_defaults
    image: ghcr.io/infoterminal/frontend:v1.0@sha256:b731de6d032ab2f1a745a72a5a585d1151a0d0b2686d7c9fbb0ad75461bfc3c1
    ports:
      - "${IT_PORT_FRONTEND:-3411}:3000"
    environment:
      - NEXT_PUBLIC_GATEWAY_URL=http://gateway:8080
      - NEXT_PUBLIC_SEARCH_API=http://search-api:8080
      - NEXT_PUBLIC_GRAPH_API=http://graph-api:8080
      - NEXT_PUBLIC_DOCENTITIES_API=http://doc-entities:8000
      - NEXT_PUBLIC_AUTH_REQUIRED=1
      - NEXT_PUBLIC_FEATURE_AGENT=1
      - NEXT_PUBLIC_FEATURE_NLP=1
    depends_on:
      gateway:
        condition: service_healthy
      search-api:
        condition: service_healthy
      graph-api:
        condition: service_healthy
      doc-entities:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  search-api:
    <<: *runtime_defaults
    image: ghcr.io/infoterminal/search-api:v1.0@sha256:9c86a5fe9b0d9dba80a1e9c2ba4cfe65379b780a5ad54837b2548113610b8024
    environment:
      - OPENSEARCH_URL=http://opensearch:9200
      - SERVICE_ENV=production
    depends_on:
      opensearch:
        condition: service_healthy
    ports:
      - "${IT_PORT_SEARCH_API:-8611}:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/readyz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  graph-api:
    <<: *runtime_defaults
    image: ghcr.io/infoterminal/graph-api:v1.0@sha256:7b4e9b3097c55cbe7c7de79b0f1f6ab0b250f893b5bc21b2f75a386a68b018c9
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-test12345}
      - SERVICE_ENV=production
    depends_on:
      neo4j:
        condition: service_healthy
    ports:
      - "${IT_PORT_GRAPH_API:-8612}:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/readyz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  doc-entities:
    <<: *runtime_defaults
    image: ghcr.io/infoterminal/doc-entities:v1.0@sha256:cc4a65f1cd6fb2e2bdb9e7fb0d25e705671c47e4d4cc2dc8b4457e4f15d66147
    environment:
      - DATABASE_URL=postgresql://it_user:it_pass@postgres:5432/it_graph
      - SERVICE_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${IT_PORT_DOC_ENTITIES:-8613}:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/readyz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  auth-service:
    <<: *runtime_defaults
    image: ghcr.io/infoterminal/auth-service:v1.0@sha256:d2b4a8cf9f74b4fd3f019ed592df3fe6e6ccdd0bb3e6132f2b1c7e1a9c2bc6c8
    ports:
      - "${IT_PORT_AUTH_SERVICE:-8616}:8080"
    environment:
      - AUTH_DATABASE_URL=postgresql://it_user:it_pass@postgres:5432/it_auth
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change-me-in-prod}
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=15
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=7
      - SERVICE_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/readyz || curl -fsS http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  opensearch:
    <<: *runtime_defaults
    image: opensearchproject/opensearch:2.11.1@sha256:cbca8e35fb333af938289ac0f370abdcbde46dbe7629acc1af0cd4219da85b62
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9200/_cluster/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    restart: unless-stopped

  neo4j:
    <<: *runtime_defaults
    image: neo4j:5.18.0@sha256:b018c04b0d01e7b6b3ff001d297fe2b80d0612a49516a7d20b0beb7f784994bb
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-test12345}
      - NEO4J_dbms_memory_pagecache_size=512M
      - NEO4J_server_memory_heap_initial__size=512m
      - NEO4J_server_memory_heap_max__size=1024m
    ports:
      - "${IT_PORT_NEO4J_BOLT:-8767}:7687"
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:7474 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10
    volumes:
      - neo4j_data:/data
    restart: unless-stopped

  postgres:
    <<: *runtime_defaults
    image: postgres:16.2@sha256:4aea012537edfad80f98d870a36e6b90b4c09b27be7f4b4759d72db863baeebb
    environment:
      - POSTGRES_USER=it_user
      - POSTGRES_PASSWORD=it_pass
      - POSTGRES_DB=it_graph
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init:/docker-entrypoint-initdb.d
    restart: unless-stopped

volumes:
  opensearch_data:
    driver: local
  neo4j_data:
    driver: local
  postgres_data:
    driver: local
