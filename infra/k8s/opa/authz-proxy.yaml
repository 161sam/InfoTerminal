apiVersion: v1
kind: ConfigMap
metadata:
  name: authz-proxy-app
  namespace: policy
data:
  app.py: |
    import os
    from fastapi import FastAPI, Request, Response
    import httpx
    from cachetools import TTLCache
    from jose import jwt

    OAUTH2_AUTH = os.getenv("OAUTH2_AUTH","http://oauth2-proxy.edge-auth.svc.cluster.local/oauth2/auth")
    OPA_URL = os.getenv("OPA_URL","http://opa.policy.svc.cluster.local:8181/v1/data/access/allow")
    ISSUER = os.getenv("KEYCLOAK_ISSUER","http://localhost:8081/realms/infoterminal")
    _cache = TTLCache(1, 300)

    app = FastAPI()

    @app.get("/health")
    def health(): return {"ok": True}

    @app.get("/authz")
    async def authz(request: Request):
        # 1) AuthN via oauth2-proxy (Cookie Session)
        headers = {k:v for k,v in request.headers.items() if k.lower().startswith("cookie") or k.lower().startswith("x-forwarded")}
        try:
            r = httpx.get(OAUTH2_AUTH, headers=headers, timeout=3.0)
            if r.status_code != 202:
                # nicht eingeloggt -> 401, Traefik leitet auf /oauth2/start um
                return Response(status_code=401)
            # Nutzerinfos aus oauth2-proxy Headers
            user = {
              "username": r.headers.get("X-Auth-Request-User") or r.headers.get("X-Forwarded-User") or "unknown",
              "email": r.headers.get("X-Auth-Request-Email") or "",
              "roles": (r.headers.get("X-Auth-Request-Groups") or "").split(",") if r.headers.get("X-Auth-Request-Groups") else ["analyst"]
            }
        except Exception:
            # dev fail-open auf authn
            user = {"username":"dev","roles":["analyst"]}

        # 2) OPA-Decision (AuthZ)
        host = request.headers.get("x-forwarded-host","")
        path = request.headers.get("x-forwarded-uri","/")
        resource = {"classification":"public","host":host,"path":path}
        payload = {"input": {"user": user, "action":"read", "resource": resource}}
        allow = True
        try:
            rr = httpx.post(OPA_URL, json=payload, timeout=3.0)
            rr.raise_for_status()
            allow = bool(rr.json().get("result", False))
        except Exception:
            allow = True  # dev

        if allow:
            return Response(status_code=200, headers={"X-User":user["username"], "X-Roles":",".join(user["roles"])})
        return Response(status_code=403)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authz-proxy
  namespace: policy
spec:
  replicas: 1
  selector: { matchLabels: { app: authz-proxy } }
  template:
    metadata: { labels: { app: authz-proxy } }
    spec:
      containers:
      - name: app
        image: python:3.11-slim
        command: ["/bin/sh","-c"]
        args:
          - pip install -q fastapi uvicorn httpx python-jose[cryptography] cachetools &&
            uvicorn app:app --host 0.0.0.0 --port 8080
        ports: [ { containerPort: 8080 } ]
        env:
          - { name: KEYCLOAK_ISSUER, value: "http://localhost:8081/realms/infoterminal" }
          - { name: KEYCLOAK_AUDIENCE, value: "search-api" }
          - { name: OPA_URL, value: "http://opa.policy.svc.cluster.local:8181/v1/data/access/allow" }
        volumeMounts:
          - name: app
            mountPath: /app
      volumes:
        - name: app
          configMap: { name: authz-proxy-app }
---
apiVersion: v1
kind: Service
metadata:
  name: authz-proxy
  namespace: policy
spec:
  selector: { app: authz-proxy }
  ports:
    - name: http
      port: 80
      targetPort: 8080
