apiVersion: v1
kind: ConfigMap
metadata: { name: grafana-datasources, namespace: observability }
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus.observability.svc.cluster.local:9090
      - name: Tempo
        type: tempo
        access: proxy
        url: http://tempo.observability.svc.cluster.local:3200
---
apiVersion: apps/v1
kind: Deployment
metadata: { name: prometheus, namespace: observability }
spec:
  replicas: 1
  selector: { matchLabels: { app: prometheus } }
  template:
    metadata: { labels: { app: prometheus } }
    spec:
      containers:
        - name: prom
          image: prom/prometheus:v2.53.0
          args:
            - --config.file=/etc/prometheus/prometheus.yaml
            - --storage.tsdb.path=/prom
          ports: [{ containerPort: 9090 }]
          volumeMounts:
            - { name: cfg, mountPath: /etc/prometheus }
            - { name: data, mountPath: /prom }
      volumes:
        - name: cfg
          configMap:
            name: prometheus-config
        - name: data
          emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata: { name: prometheus-config, namespace: observability }
data:
  prometheus.yaml: |
    global: { scrape_interval: 15s }
    scrape_configs:
      - job_name: 'otel-collector'
        static_configs:
          - targets: ['otel-collector.observability.svc.cluster.local:8889']
---
apiVersion: v1
kind: Service
metadata: { name: prometheus, namespace: observability }
spec:
  selector: { app: prometheus }
  ports: [{ name: http, port: 9090, targetPort: 9090 }]
---
apiVersion: apps/v1
kind: Deployment
metadata: { name: grafana, namespace: observability }
spec:
  replicas: 1
  selector: { matchLabels: { app: grafana } }
  template:
    metadata: { labels: { app: grafana } }
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.4.0
          env:
            - { name: GF_AUTH_ANONYMOUS_ENABLED, value: "true" }
            - { name: GF_AUTH_ANONYMOUS_ORG_ROLE, value: "Viewer" }
          ports: [{ containerPort: 3000 }]
          volumeMounts:
            - { name: ds, mountPath: /etc/grafana/provisioning/datasources }
      volumes:
        - name: ds
          configMap: { name: grafana-datasources }
---
apiVersion: v1
kind: Service
metadata: { name: grafana, namespace: observability }
spec:
  selector: { app: grafana }
  ports: [{ name: http, port: 3000, targetPort: 3000 }]
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana
  namespace: observability
spec:
  ingressClassName: traefik
  rules:
    - host: grafana.127.0.0.1.nip.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend: { service: { name: grafana, port: { number: 3000 } } }
