repositories:
  - name: bitnami
    url: https://charts.bitnami.com/bitnami
  - name: opensearch
    url: https://opensearch-project.github.io/helm-charts
  - name: traefik
    url: https://traefik.github.io/charts

releases:
  - name: traefik
    namespace: ingress
    chart: traefik/traefik
    createNamespace: true
    values:
      - {}
  - name: postgres
    namespace: data
    chart: bitnami/postgresql
    createNamespace: true
    values:
      - primary:
          service:
            type: NodePort
            nodePorts:
              postgresql: 5432
        auth:
          postgresPassword: postgres
          username: app
          password: app
          database: infoterminal
  - name: minio
    namespace: data
    chart: bitnami/minio
    values:
      - mode: standalone
        auth:
          rootUser: admin
          rootPassword: adminadmin
        service:
          type: NodePort
          nodePorts:
            api: 9000
  - name: opensearch
    namespace: search
    chart: opensearch/opensearch
    values:
      - singleNode: true
        persistence:
          enabled: false
        service:
          type: NodePort
          nodePorts:
            http: 9200
  - name: keycloak
    namespace: auth
    chart: bitnami/keycloak
    values:
      - auth:
          adminUser: admin
          adminPassword: adminadmin
        proxy: edge
        service:
          type: NodePort
          nodePorts:
            http: 8081
  - name: superset
    namespace: analytics
    chart: bitnami/superset
    createNamespace: true
    values:
      - service:
          type: NodePort
          nodePorts: { http: 8088 }
        supersetUsername: admin
        supersetPassword: adminadmin
        externalDatabase:
          host: postgres-postgresql.data.svc.cluster.local
          user: app
          password: app
          database: infoterminal
          port: 5432
        extraEnvVars:
          - name: KC_ISSUER
            value: "http://localhost:8081/realms/infoterminal"
          - name: KC_CLIENT_ID
            value: "superset"
          - name: KC_CLIENT_SECRET
            value: "superset-secret"
        supersetExtraConfig: |
          import os
          from flask_appbuilder.security.manager import AUTH_OAUTH
          AUTH_TYPE = AUTH_OAUTH
          AUTH_USER_REGISTRATION = True
          AUTH_USER_REGISTRATION_ROLE = "Gamma"
          # DEV only â€“ vermeidet CSRF-Probleme beim lokalen OIDC-Flow
          WTF_CSRF_ENABLED = False

          KC_ISSUER = os.getenv("KC_ISSUER", "").rstrip("/")
          OAUTH_PROVIDERS = [
            {
              "name": "keycloak",
              "icon": "fa-key",
              "token_key": "access_token",
              "remote_app": {
                "client_id": os.getenv("KC_CLIENT_ID", "superset"),
                "client_secret": os.getenv("KC_CLIENT_SECRET", "superset-secret"),
                "access_token_url": f"{KC_ISSUER}/protocol/openid-connect/token",
                "authorize_url": f"{KC_ISSUER}/protocol/openid-connect/auth",
                "api_base_url": f"{KC_ISSUER}/protocol/openid-connect",
                "userinfo_endpoint": f"{KC_ISSUER}/protocol/openid-connect/userinfo",
                "client_kwargs": {"scope": "openid email profile"},
              },
            }
          ]
