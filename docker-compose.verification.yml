# docker-compose.verification.yml
# InfoTerminal v0.2.0 - Complete Verification & Orchestration Stack
version: '3.8'

services:
  # Core Verification Service
  verification-service:
    build: 
      context: ./services/verification
      dockerfile: Dockerfile
    container_name: infoterminal-verification
    ports:
      - "${IT_PORT_VERIFICATION:-8617}:8617"
    environment:
      - VERIFICATION_SERVICE_PORT=8617
      - POSTGRES_URL=postgresql://infoterminal:${POSTGRES_PASSWORD:-infoterminal}@postgres:5432/infoterminal
      - OPENSEARCH_URL=http://opensearch:9200
      - NEO4J_URL=neo4j://neo4j:7687
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-neo4j123}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CACHE_ENABLED=true
      - CACHE_TTL_SECONDS=300
    depends_on:
      postgres:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8617/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - infoterminal
    restart: unless-stopped
    volumes:
      - verification-models:/app/models
      - verification-cache:/app/cache

  # Enhanced Ops Controller with Verification Orchestration
  ops-controller:
    build:
      context: ./services/ops-controller
      dockerfile: Dockerfile
    container_name: infoterminal-ops-controller
    ports:
      - "${IT_PORT_OPS_CONTROLLER:-8618}:8000"
    environment:
      - IT_OPS_ENABLE=1
      - IT_OPS_MODE=docker
      - IT_DOCKER_SOCKET=/var/run/docker.sock
      - IT_OPS_LOCK_TIMEOUT_SEC=120
      - IT_NIFI_ENABLE=${IT_NIFI_ENABLE:-1}
      - IT_N8N_ENABLE=${IT_N8N_ENABLE:-1}
      - IT_VERIFICATION_DIRECT=${IT_VERIFICATION_DIRECT:-1}
      - IT_NIFI_URL=http://nifi:8080
      - IT_N8N_URL=http://n8n:5678
      - IT_N8N_WEBHOOK_URL=http://n8n:5678/webhook/verify
      - VERIFICATION_SERVICE_URL=http://verification-service:8617
      - FRONTEND_API_URL=http://frontend:3000/api
      - POSTGRES_URL=postgresql://infoterminal:${POSTGRES_PASSWORD:-infoterminal}@postgres:5432/infoterminal
    depends_on:
      - verification-service
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - infoterminal
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ops-data:/app/data
      - ops-logs:/app/logs

  # Apache NiFi for Data Pipeline Orchestration
  nifi:
    image: apache/nifi:2.0.0
    container_name: infoterminal-nifi
    ports:
      - "${IT_PORT_NIFI:-8619}:8080"
      - "${IT_PORT_NIFI_CLUSTER:-11443}:11443"
    environment:
      - NIFI_WEB_HTTPS_PORT=
      - NIFI_WEB_HTTP_PORT=8080
      - NIFI_CLUSTER_IS_NODE=false
      - NIFI_ZK_CONNECT_STRING=
      - NIFI_ELECTION_MAX_WAIT=30 sec
      - NIFI_SENSITIVE_PROPS_KEY=${NIFI_SENSITIVE_PROPS_KEY:-infoterminal-nifi-key}
      - NIFI_JVM_HEAP_INIT=1g
      - NIFI_JVM_HEAP_MAX=2g
      - NIFI_WEB_PROXY_HOST=${IT_HOSTNAME:-localhost:8619}
      - SINGLE_USER_CREDENTIALS_USERNAME=admin
      - SINGLE_USER_CREDENTIALS_PASSWORD=${NIFI_PASSWORD:-adminpassword}
    depends_on:
      - verification-service
      - postgres
      - opensearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/nifi-api/system-diagnostics"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s
    networks:
      - infoterminal
    restart: unless-stopped
    volumes:
      - nifi-conf:/opt/nifi/nifi-current/conf
      - nifi-content:/opt/nifi/nifi-current/content_repository
      - nifi-database:/opt/nifi/nifi-current/database_repository
      - nifi-flowfile:/opt/nifi/nifi-current/flowfile_repository
      - nifi-provenance:/opt/nifi/nifi-current/provenance_repository
      - nifi-state:/opt/nifi/nifi-current/state
      - nifi-logs:/opt/nifi/nifi-current/logs
      - ./etl/nifi/templates:/opt/nifi/templates:ro
      - verification-pipeline-data:/opt/nifi/verification

  # n8n for Workflow Automation
  n8n:
    image: n8nio/n8n:1.58.2
    container_name: infoterminal-n8n
    ports:
      - "${IT_PORT_N8N:-5678}:5678"
    environment:
      - N8N_HOST=${IT_HOSTNAME:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://${IT_HOSTNAME:-localhost}:5678
      - GENERIC_TIMEZONE=${TZ:-UTC}
      - N8N_SECURE_COOKIE=false
      - N8N_HIRING_BANNER_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_VERSION_NOTIFICATIONS_ENABLED=false
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PUBLIC_API_DISABLED=false
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-adminpassword}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=${N8N_DB_PASSWORD:-n8npassword}
    depends_on:
      postgres:
        condition: service_healthy
      verification-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - infoterminal
    restart: unless-stopped
    volumes:
      - n8n-data:/home/node/.n8n
      - ./apps/n8n:/home/node/workflows:ro

  # Enhanced Frontend with Verification UI
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: infoterminal-frontend
    ports:
      - "${IT_PORT_FRONTEND:-3000}:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://${IT_HOSTNAME:-localhost}:8001
      - NEXT_PUBLIC_GRAPH_API_URL=http://${IT_HOSTNAME:-localhost}:8612
      - NEXT_PUBLIC_OPS_URL=http://${IT_HOSTNAME:-localhost}:8618
      - NEXT_PUBLIC_VERIFICATION_URL=http://${IT_HOSTNAME:-localhost}:8617
      - NEXT_PUBLIC_NIFI_URL=http://${IT_HOSTNAME:-localhost}:8619
      - NEXT_PUBLIC_N8N_URL=http://${IT_HOSTNAME:-localhost}:5678
      - VERIFICATION_SERVICE_URL=http://verification-service:8617
      - OPS_CONTROLLER_URL=http://ops-controller:8000
      - DATABASE_URL=postgresql://infoterminal:${POSTGRES_PASSWORD:-infoterminal}@postgres:5432/infoterminal
    depends_on:
      - verification-service
      - ops-controller
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - infoterminal
    restart: unless-stopped

  # Enhanced PostgreSQL with Verification Schema
  postgres:
    image: postgres:16-alpine
    container_name: infoterminal-postgres
    ports:
      - "${IT_PORT_POSTGRES:-5432}:5432"
    environment:
      - POSTGRES_DB=infoterminal
      - POSTGRES_USER=infoterminal
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-infoterminal}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U infoterminal -d infoterminal"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - infoterminal
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infra/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./infra/postgres/schemas:/schemas:ro

  # Existing core services (search-api, graph-api, etc.)
  search-api:
    build:
      context: ./services/search-api
      dockerfile: Dockerfile
    container_name: infoterminal-search-api
    ports:
      - "${IT_PORT_SEARCH:-8001}:8001"
    environment:
      - OPENSEARCH_URL=http://opensearch:9200
      - POSTGRES_URL=postgresql://infoterminal:${POSTGRES_PASSWORD:-infoterminal}@postgres:5432/infoterminal
    depends_on:
      opensearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - infoterminal
    restart: unless-stopped

  graph-api:
    build:
      context: ./services/graph-api
      dockerfile: Dockerfile
    container_name: infoterminal-graph-api
    ports:
      - "${IT_PORT_GRAPH:-8612}:8612"
    environment:
      - NEO4J_URL=neo4j://neo4j:7687
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-neo4j123}
    depends_on:
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8612/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - infoterminal
    restart: unless-stopped

  opensearch:
    image: opensearchproject/opensearch:2.11.1
    container_name: infoterminal-opensearch
    ports:
      - "${IT_PORT_OPENSEARCH:-9200}:9200"
      - "${IT_PORT_OPENSEARCH_PERF:-9600}:9600"
    environment:
      - cluster.name=infoterminal
      - node.name=opensearch-node
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
      - plugins.security.disabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - infoterminal
    restart: unless-stopped
    volumes:
      - opensearch-data:/usr/share/opensearch/data

  neo4j:
    image: neo4j:5.15
    container_name: infoterminal-neo4j
    ports:
      - "${IT_PORT_NEO4J:-7474}:7474"
      - "${IT_PORT_NEO4J_BOLT:-7687}:7687"
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-neo4j123}
      - NEO4J_PLUGINS=["apoc","graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-neo4j123}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - infoterminal
    restart: unless-stopped
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs

networks:
  infoterminal:
    driver: bridge
    name: infoterminal-network

volumes:
  # Verification Service
  verification-models:
    name: infoterminal-verification-models
  verification-cache:
    name: infoterminal-verification-cache

  # Ops Controller
  ops-data:
    name: infoterminal-ops-data
  ops-logs:
    name: infoterminal-ops-logs

  # NiFi
  nifi-conf:
    name: infoterminal-nifi-conf
  nifi-content:
    name: infoterminal-nifi-content
  nifi-database:
    name: infoterminal-nifi-database
  nifi-flowfile:
    name: infoterminal-nifi-flowfile
  nifi-provenance:
    name: infoterminal-nifi-provenance
  nifi-state:
    name: infoterminal-nifi-state
  nifi-logs:
    name: infoterminal-nifi-logs
  verification-pipeline-data:
    name: infoterminal-verification-pipeline-data

  # n8n
  n8n-data:
    name: infoterminal-n8n-data

  # Database
  postgres-data:
    name: infoterminal-postgres-data

  # Search & Graph
  opensearch-data:
    name: infoterminal-opensearch-data
  neo4j-data:
    name: infoterminal-neo4j-data
  neo4j-logs:
    name: infoterminal-neo4j-logs
