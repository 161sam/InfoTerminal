name: CI

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  pull-requests: write
  security-events: write  # for SARIF upload on push

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend:
    name: Backend (graph-views)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/graph-views
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: services/graph-views/requirements-dev.txt
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Pytest
        env:
          PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
          PYTHONPATH: ${{ github.workspace }}/services/graph-views
        run: |
          pytest -q

  frontend:
    name: Frontend (apps/frontend)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Install
        run: npm ci
      - name: Lint
        run: npm -w apps/frontend run lint --silent
      - name: Test
        run: npm -w apps/frontend run test --silent -- --reporter=dot

  sbom-source-integrity:
    name: Supply-Chain (SBOM Source)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Generate source SBOMs
        run: python scripts/generate_source_sbom.py
      - name: Verify SBOM artefacts committed
        run: |
          git status --short artifacts/sbom artifacts/compliance || true
          git diff --stat
          git diff --exit-code
      - name: sbom_source_integrity gate
        run: python scripts/check_sbom_source_integrity.py

  sbom-image-integrity:
    name: Supply-Chain (SBOM Images)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: sbom_image_integrity gate
        run: python scripts/check_sbom_image_integrity.py

  gitleaks:
    name: Secrets Scan (gitleaks → SARIF)
    runs-on: ubuntu-latest
    # Nur auf push ausführen, um Fork-PR-Permissions-Probleme zu vermeiden
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Install gitleaks
        run: |
          GITLEAKS_VERSION=8.18.2
          curl -sL https://github.com/gitleaks/gitleaks/releases/download/v${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION}_linux_x64.tar.gz \
            | tar -xz
          sudo mv gitleaks /usr/local/bin/gitleaks

      - name: Run gitleaks (always produce SARIF)
        run: |
          gitleaks detect --no-banner --source . \
            --report-format sarif --report-path gitleaks.sarif || true
          # Fallback: leere SARIF, falls Report fehlt
          test -f gitleaks.sarif || echo '{"version":"2.1.0","runs":[]}' > gitleaks.sarif

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

  secrets-hygiene:
    name: Security (Secrets Hygiene)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Run secrets hygiene scan
        id: secrets
        run: |
          set +e
          python3 scripts/run_secrets_hygiene.py
          status=$?
          echo "secrets_status=$status" >> "$GITHUB_OUTPUT"
          exit 0
      - name: Ensure secrets artefacts committed
        run: |
          git status --short artifacts/security/secrets || true
          git diff --stat artifacts/security/secrets || true
          git diff --exit-code artifacts/security/secrets
      - name: Publish secrets hygiene summary
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: secrets-hygiene
          path: artifacts/security/secrets/pr_comment.md
      - name: Enforce secrets hygiene status
        if: steps.secrets.outputs.secrets_status != '0'
        run: |
          echo "secrets hygiene gate failed with status ${{ steps.secrets.outputs.secrets_status }}"
          exit 1

  observability:
    name: Observability Baseline
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: pip install pyyaml
      - name: Generate inventory
        run: python scripts/generate_inventory.py
      - name: Ensure inventory committed
        run: git diff --exit-code
      - name: Observability baseline gate
        run: python scripts/check_observability_baseline.py

  synthetic-smoke:
    name: Synthetic Smoke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate synthetic smoke targets
        run: python scripts/synthetic_smoke.py --validate-only

  perf-smoke:
    name: Performance Smoke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Run perf smoke benchmarks (simulate)
        run: python benchmarks/perf_smoke.py

  vuln-policy-sca:
    name: Supply-Chain (Dependency SCA)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: "9"
      - name: Install workspace dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
      - name: Run dependency SCA
        id: sca
        run: |
          set +e
          python scripts/run_vuln_policy_sca.py
          status=$?
          echo "sca_status=$status" >> "$GITHUB_OUTPUT"
          exit 0
      - name: Ensure artefacts are committed
        run: |
          git status --short artifacts/security/sca || true
          git diff --stat artifacts/security/sca || true
          git diff --exit-code artifacts/security/sca
      - name: Publish SCA summary comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: dependency-sca
          path: artifacts/security/sca/pr_comment.md
      - name: Enforce policy status
        if: steps.sca.outputs.sca_status != '0'
        run: |
          echo "vuln_policy_sca failed with status ${{ steps.sca.outputs.sca_status }}"
          exit 1

  vuln-policy-images:
    name: Supply-Chain (Container Images)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install Trivy
        run: |
          TRIVY_VERSION=0.53.0
          curl -sSL https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz | tar -xz
          sudo install -m 0755 trivy /usr/local/bin/trivy
          rm -f trivy LICENSE README.md README
      - name: Configure Trivy environment
        run: |
          echo "DOCKER_HOST=unix:///var/run/docker.sock" >> "$GITHUB_ENV"
          echo "PATH=/usr/local/bin:$PATH" >> "$GITHUB_ENV"
          echo "TRIVY_CACHE_DIR=${RUNNER_TEMP}/trivy-cache" >> "$GITHUB_ENV"
      - name: Run container vulnerability scan
        id: images
        run: |
          set +e
          python3 scripts/run_vuln_policy_images.py
          status=$?
          echo "images_status=$status" >> "$GITHUB_OUTPUT"
          exit 0
      - name: Ensure artefacts are committed
        run: |
          git status --short artifacts/security/images || true
          git diff --stat artifacts/security/images || true
          git diff --exit-code artifacts/security/images
      - name: Publish container scan summary comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: container-images
          path: artifacts/security/images/pr_comment.md
      - name: Enforce policy status
        if: steps.images.outputs.images_status != '0'
        run: |
          echo "vuln_policy_images failed with status ${{ steps.images.outputs.images_status }}"
          exit 1
