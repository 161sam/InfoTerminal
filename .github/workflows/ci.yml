name: CI

on:
  pull_request:
  push:
    branches: [ main ]

env:
  LANG: C.UTF-8
  LC_ALL: C.UTF-8

jobs:
  backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [ "3.11" ]
        service: [ "services/search-api", "services/graph-api" ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: ${{ matrix.python }} }
      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install pytest pytest-asyncio pytest-cov httpx ruff mypy
          if [ -f "${{ matrix.service }}/pyproject.toml" ]; then
            pip install -e "${{ matrix.service }}[dev]" || true
          fi
      - name: Lint & Typecheck
        run: |
          ruff check ${{ matrix.service }} || true
          mypy ${{ matrix.service }} || true
      - name: Tests (pytest)
        working-directory: ${{ matrix.service }}
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=. --cov-report=xml:coverage.xml
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-python-${{ matrix.service }}
          path: ${{ matrix.service }}/coverage.xml

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - name: Use pnpm
        run: npm i -g pnpm
      - name: Install
        working-directory: apps/frontend
        run: pnpm install --frozen-lockfile || pnpm install
      - name: Typecheck
        working-directory: apps/frontend
        run: pnpm run typecheck || true
      - name: Unit tests (vitest)
        working-directory: apps/frontend
        run: pnpm run coverage
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend
          path: apps/frontend/coverage

  e2e:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: "20" }
      - name: Use pnpm
        run: npm i -g pnpm
      - name: Install frontend
        working-directory: apps/frontend
        run: pnpm install --frozen-lockfile || pnpm install
      - name: Build frontend
        working-directory: apps/frontend
        run: pnpm build || true
      - name: Start services (dev)
        run: |
          if [ -f Makefile ]; then make dev-up || true; fi
          sleep 30
      - name: Install Playwright
        working-directory: apps/frontend
        run: pnpm run e2e:install
      - name: Run E2E
        working-directory: apps/frontend
        env:
          E2E_BASE_URL: http://localhost:3000
          E2E_DUMMY_TOKEN: test-token
        run: pnpm run e2e
      - uses: actions/upload-artifact@v4
        with:
          name: e2e-report
          path: apps/frontend/playwright-report
        if: always()

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Trivy FS scan (optional)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

  perf:
    runs-on: ubuntu-latest
    needs: [backend]
    steps:
      - uses: actions/checkout@v4
      - name: Install autocannon
        run: npm i -g autocannon
      - name: Quick API smoke benchmark (search)
        run: |
          autocannon -d 10 -c 20 http://localhost:8080/search?q=test || true

  superset:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Lint Superset assets
        run: |
          pip install yamllint jq
          yamllint apps/superset/assets/datasets/*.yaml
          find apps/superset/assets -name '*.json' -exec jq . {} \;
