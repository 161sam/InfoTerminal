name: Production Ready CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  HELM_VERSION: '3.12.0'
  KUBECTL_VERSION: '1.27.3'

jobs:
  # =====================================================
  # Code Quality and Security Analysis
  # =====================================================
  code-quality:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.quality-gate.outputs.should-deploy }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        npm ci
        pip install -r requirements.txt
        pip install safety bandit semgrep

    - name: Run ESLint
      run: npm run lint:js
      continue-on-error: true

    - name: Run TypeScript checks
      run: npm run type-check
      continue-on-error: true

    - name: Run Python linting
      run: |
        flake8 services/ --max-line-length=100
        black --check services/
        isort --check-only services/
      continue-on-error: true

    - name: Security scan - Python dependencies
      run: safety check --json --output safety-report.json
      continue-on-error: true

    - name: Security scan - Node.js dependencies
      run: npm audit --audit-level=high --json > npm-audit-report.json
      continue-on-error: true

    - name: Security scan - Code analysis with Bandit
      run: bandit -r services/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Security scan - Semgrep
      run: |
        semgrep --config=auto --json --output=semgrep-report.json services/ apps/
      continue-on-error: true

    - name: Quality Gate Decision
      id: quality-gate
      run: |
        # Analyze reports and decide if deployment should proceed
        echo "should-deploy=true" >> $GITHUB_OUTPUT
        # Add logic to parse reports and set to false if critical issues found

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          npm-audit-report.json
          bandit-report.json
          semgrep-report.json

  # =====================================================
  # Build and Test
  # =====================================================
  build-and-test:
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: infoterminal_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      neo4j:
        image: neo4j:5
        env:
          NEO4J_AUTH: neo4j/test
        ports:
          - 7687:7687

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        npm ci
        cd apps/frontend && npm ci && cd ../..
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Build frontend
      run: |
        cd apps/frontend
        npm run build
        cd ../..

    - name: Run unit tests - Frontend
      run: |
        cd apps/frontend
        npm run test:unit
        cd ../..

    - name: Run unit tests - Backend
      run: |
        pytest services/ -v --cov=services --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://postgres:test@localhost:5432/infoterminal_test
        REDIS_URL: redis://localhost:6379
        NEO4J_URI: bolt://neo4j:test@localhost:7687

    - name: Run E2E tests
      run: |
        cd apps/frontend
        npm run test:e2e:headless
        cd ../..
      env:
        TEST_DATABASE_URL: postgresql://postgres:test@localhost:5432/infoterminal_test

    - name: Run OSINT workflow tests
      run: |
        pytest tests/user-testing/e2e-workflows/ -v
      env:
        TEST_MODE: true
        DATABASE_URL: postgresql://postgres:test@localhost:5432/infoterminal_test

    - name: Performance regression tests
      run: |
        python tests/performance/regression_tests.py
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml
          test-results/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml

  # =====================================================
  # Container Image Build
  # =====================================================
  build-images:
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test]
    if: needs.code-quality.outputs.should-deploy == 'true'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    strategy:
      matrix:
        service: [gateway, frontend, feedback-aggregator, performance-monitor, cache-manager, websocket-manager]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD'}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        provenance: true
        sbom: true

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom-${{ matrix.service }}.spdx.json

    - name: Scan image for vulnerabilities
      uses: anchore/scan-action@v3
      with:
        image: ${{ steps.meta.outputs.tags }}
        fail-build: false
        output-format: sarif
        output-file: vulnerability-report-${{ matrix.service }}.sarif

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom-${{ matrix.service }}
        path: sbom-${{ matrix.service }}.spdx.json

    - name: Upload vulnerability report
      uses: actions/upload-artifact@v3
      with:
        name: vulnerability-report-${{ matrix.service }}
        path: vulnerability-report-${{ matrix.service }}.sarif

  # =====================================================
  # Security Scanning
  # =====================================================
  container-security:
    runs-on: ubuntu-latest
    needs: build-images
    strategy:
      matrix:
        service: [gateway, frontend, feedback-aggregator, performance-monitor, cache-manager, websocket-manager]

    steps:
    - name: Download vulnerability reports
      uses: actions/download-artifact@v3
      with:
        name: vulnerability-report-${{ matrix.service }}

    - name: Upload to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: vulnerability-report-${{ matrix.service }}.sarif
        category: container-${{ matrix.service }}

  # =====================================================
  # Infrastructure Validation
  # =====================================================
  infrastructure-validation:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Lint Helm charts
      run: |
        helm lint charts/infoterminal/

    - name: Validate Kubernetes manifests
      run: |
        helm template infoterminal charts/infoterminal/ \
          --values charts/infoterminal/values.yaml \
          --output-dir rendered-manifests/
        
        # Validate with kubeval if available
        if command -v kubeval &> /dev/null; then
          find rendered-manifests/ -name "*.yaml" -exec kubeval {} \;
        fi

    - name: Security scan - Kubernetes manifests
      uses: stackhawk/docker-trivy-action@v1
      with:
        target: '.'
        format: 'sarif'
        output: 'k8s-security-report.sarif'

    - name: Upload K8s security report
      uses: actions/upload-artifact@v3
      with:
        name: k8s-security-report
        path: k8s-security-report.sarif

  # =====================================================
  # Staging Deployment
  # =====================================================
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images, infrastructure-validation, container-security]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment:
      name: staging
      url: https://staging.infoterminal.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Configure kubeconfig
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Pre-deployment tests
      run: |
        kubectl get nodes
        helm list -n infoterminal-staging

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        
        helm upgrade --install infoterminal-staging charts/infoterminal/ \
          --namespace infoterminal-staging \
          --create-namespace \
          --values charts/infoterminal/values-staging.yaml \
          --set image.tag=${{ github.sha }} \
          --set global.environment=staging \
          --wait \
          --timeout=10m

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        python tests/smoke/staging_smoke_tests.py
      env:
        STAGING_URL: https://staging.infoterminal.example.com

    - name: Performance tests
      run: |
        python tests/performance/load_tests.py --environment staging
      continue-on-error: true

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # =====================================================
  # Production Deployment
  # =====================================================
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.deployment_environment == 'production')
    environment:
      name: production
      url: https://infoterminal.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Configure kubeconfig
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Backup current deployment
      run: |
        export KUBECONFIG=kubeconfig
        
        # Create backup of current Helm release
        helm get values infoterminal -n infoterminal > backup-values-$(date +%Y%m%d-%H%M%S).yaml
        
        # Backup database
        kubectl exec -n infoterminal deployment/postgres -- pg_dump -U infoterminal infoterminal > backup-db-$(date +%Y%m%d-%H%M%S).sql

    - name: Pre-deployment validation
      run: |
        export KUBECONFIG=kubeconfig
        
        # Check cluster health
        kubectl get nodes
        kubectl top nodes
        
        # Check current application health
        kubectl get pods -n infoterminal
        
        # Validate resources
        kubectl describe resourcequota -n infoterminal

    - name: Blue-Green Deployment
      run: |
        export KUBECONFIG=kubeconfig
        
        # Deploy to green environment first
        helm upgrade --install infoterminal-green charts/infoterminal/ \
          --namespace infoterminal-green \
          --create-namespace \
          --values charts/infoterminal/values-production.yaml \
          --set image.tag=${{ github.sha }} \
          --set global.environment=production \
          --set ingress.hosts[0].host=green.infoterminal.example.com \
          --wait \
          --timeout=15m

    - name: Green environment validation
      run: |
        export KUBECONFIG=kubeconfig
        
        # Wait for all pods to be ready
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=infoterminal -n infoterminal-green --timeout=300s
        
        # Run comprehensive smoke tests
        python tests/smoke/production_smoke_tests.py --environment green
        
        # Performance validation
        python tests/performance/production_validation.py --environment green

    - name: Traffic switch to green
      run: |
        export KUBECONFIG=kubeconfig
        
        # Switch ingress to green environment
        helm upgrade infoterminal-green charts/infoterminal/ \
          --namespace infoterminal-green \
          --reuse-values \
          --set ingress.hosts[0].host=infoterminal.example.com \
          --wait

    - name: Post-deployment monitoring
      run: |
        # Monitor for 5 minutes after deployment
        sleep 300
        
        # Check error rates and response times
        python tests/monitoring/post_deployment_check.py --duration 300

    - name: Cleanup old blue environment
      run: |
        export KUBECONFIG=kubeconfig
        
        # Remove old blue environment after successful deployment
        helm uninstall infoterminal -n infoterminal --timeout=10m || true

    - name: Update production namespace
      run: |
        export KUBECONFIG=kubeconfig
        
        # Rename green to production
        kubectl label namespace infoterminal-green name=infoterminal --overwrite
        
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#production-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "text": "🚀 InfoTerminal v${{ github.ref_name }} deployed to production!",
            "attachments": [{
              "color": "good",
              "fields": [{
                "title": "Environment",
                "value": "Production",
                "short": true
              }, {
                "title": "Version",
                "value": "${{ github.ref_name }}",
                "short": true
              }, {
                "title": "URL",
                "value": "https://infoterminal.example.com",
                "short": false
              }]
            }]
          }

  # =====================================================
  # Rollback Job (Manual trigger only)
  # =====================================================
  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    environment:
      name: production
    
    steps:
    - name: Configure kubeconfig
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Rollback deployment
      run: |
        export KUBECONFIG=kubeconfig
        
        # Rollback to previous Helm release
        helm rollback infoterminal -n infoterminal
        
        # Verify rollback
        helm status infoterminal -n infoterminal

    - name: Verify rollback
      run: |
        export KUBECONFIG=kubeconfig
        
        # Wait for rollback to complete
        kubectl rollout status deployment -n infoterminal --timeout=300s
        
        # Run smoke tests
        python tests/smoke/production_smoke_tests.py

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        channel: '#production-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        custom_payload: |
          {
            "text": "🔄 InfoTerminal rolled back in production",
            "attachments": [{
              "color": "warning",
              "fields": [{
                "title": "Action",
                "value": "Rollback completed",
                "short": true
              }, {
                "title": "Trigger",
                "value": "Automated due to deployment failure",
                "short": true
              }]
            }]
          }
