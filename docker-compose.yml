x-runtime-defaults: &runtime_defaults
  security_opt:
    - "no-new-privileges:true"
    - "seccomp=unconfined"
    - "apparmor:docker-default"
  cap_drop:
    - ALL
  cap_add:
    - CHOWN
    - DAC_OVERRIDE
    - FOWNER
    - SETGID
    - SETUID
    - NET_BIND_SERVICE

services:
  search-api:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: services/search-api/Dockerfile
    ports: ["${IT_PORT_SEARCH_API:-8611}:8080"]
    env_file: .env
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
    depends_on:
      opensearch:
        condition: service_healthy
  graph-api:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: services/graph-api/Dockerfile
    ports: ["${IT_PORT_GRAPH_API:-8612}:8080"]
    env_file: .env
    environment:
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-test12345}
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
    depends_on:
      neo4j:
        condition: service_healthy
  graph-views:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: services/graph-views/Dockerfile
    env_file: .env
    environment:
      - IT_ENABLE_METRICS=${IT_ENABLE_METRICS:-0}
      - IT_OTEL=${IT_OTEL:-0}
    volumes:
      - ./data/geo:/data/geo
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
    depends_on:
      postgres:
        condition: service_healthy
  auth-service:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: services/auth-service/Dockerfile
    ports: ["${IT_PORT_AUTH_SERVICE:-8616}:8080"]
    env_file: .env
    environment:
      # Auth Service specific configuration
      - AUTH_DATABASE_URL=postgresql://it_user:it_pass@postgres:5432/it_auth
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=7
      - HOST=0.0.0.0
      - PORT=8080
      - ENVIRONMENT=${IT_ENV:-dev}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:3411}
      - TRUSTED_HOSTS=${TRUSTED_HOSTS:-localhost,127.0.0.1}
      - USER_REGISTRATION_ENABLED=false
      - PASSWORD_MIN_LENGTH=8
      - MFA_ENABLED=true
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/health"]
      interval: 10s
      timeout: 3s
      retries: 10
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
  it-ui:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    ports: ["${IT_PORT_FRONTEND:-3411}:3000"]
    env_file: .env
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8080
    depends_on:
      search-api:
        condition: service_healthy
      graph-api:
        condition: service_healthy
      auth-service:
        condition: service_healthy
  opensearch:
    <<: *runtime_defaults
    image: opensearchproject/opensearch:2
    security_opt:
      - "no-new-privileges:true"
      - "seccomp=unconfined"
      - "apparmor:docker-default"
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m # adjust memory
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_INITIAL_ADMIN_PASSWORD:-Admin123!Secure}
    # No host port mapping (policy: avoid standard ports)
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:9200/_cluster/health"]
      interval: 15s
      timeout: 5s
      retries: 20
    volumes:
      - opensearch_data:/usr/share/opensearch/data
  neo4j:
    <<: *runtime_defaults
    image: neo4j:5
    security_opt:
      - "no-new-privileges:true"
      - "seccomp=unconfined"
      - "apparmor:docker-default"
    environment:
      - NEO4J_AUTH=neo4j/test12345
      - NEO4J_dbms_memory_pagecache_size=256M # tune for production
      - NEO4J_server_memory_heap_initial__size=512m
      - NEO4J_server_memory_heap_max__size=512m
    ports: ['8744:7474', '8743:7473', '8767:7687']
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:7474"]
      interval: 15s
      timeout: 5s
      retries: 20
    volumes:
      - neo4j_data:/data
  postgres:
    <<: *runtime_defaults
    image: postgres:16
    security_opt:
      - "no-new-privileges:true"
      - "seccomp=unconfined"
      - "apparmor:docker-default"
    environment:
      - POSTGRES_USER=it_user
      - POSTGRES_PASSWORD=it_pass
      - POSTGRES_DB=it_graph
    # No host port mapping (policy: avoid standard ports)
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $POSTGRES_USER -d $POSTGRES_DB']
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
  doc-entities:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: services/doc-entities/Dockerfile
    ports: ["${IT_PORT_DOC_ENTITIES:-8613}:8000"]
    env_file: .env
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
    depends_on:
      postgres:
        condition: service_healthy
  egress-gateway:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: services/egress-gateway/Dockerfile
    ports: ["${IT_PORT_EGRESS_GATEWAY:-8615}:8615"]
    env_file: .env
    environment:
      - EGRESS_BASIC_USER=${EGRESS_BASIC_USER:-dev}
      - EGRESS_BASIC_PASS=${EGRESS_BASIC_PASS:-devpass}
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8615/healthz"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - default
      - egress
    restart: unless-stopped
  rag-api:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: services/rag-api/Dockerfile
    ports: ["${IT_PORT_RAG_API:-8622}:8000"]
    env_file: .env
    environment:
      - OS_URL=${OS_URL:-http://opensearch:9200}
      - RAG_OS_INDEX=${RAG_OS_INDEX:-laws}
      - NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-test12345}
    depends_on:
      opensearch:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
  plugin-runner:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: services/plugin-runner/Dockerfile
    ports: ["${IT_PORT_PLUGIN_RUNNER:-8621}:8000"]
    env_file: .env
    environment:
      - PLUGINS_DIR=/app/plugins
      - RESULTS_DIR=/app/results
      - PLUGIN_DOCKER_ENABLED=${PLUGIN_DOCKER_ENABLED:-1}
      - PLUGIN_MAX_EXECUTION_TIME=${PLUGIN_MAX_EXECUTION_TIME:-300}
      - PLUGIN_MAX_CONCURRENT=${PLUGIN_MAX_CONCURRENT:-5}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./plugins:/app/plugins:ro
      - plugin_results:/app/results
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
      interval: 15s
      timeout: 10s
      retries: 5
    restart: unless-stopped
  xai:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: services/xai/Dockerfile
    ports: ["${IT_PORT_XAI:-8626}:8000"]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
  forensics:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: services/forensics/Dockerfile
    ports: ["${IT_PORT_FORENSICS:-8627}:8000"]
    volumes:
      - ./data/forensics:/data
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
  collab-hub:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: services/collab-hub/Dockerfile
    ports: ["${IT_PORT_COLLAB:-8625}:8000"]
    volumes:
      - ./data/collab:/data
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
  federation-proxy:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: services/federation-proxy/Dockerfile
    ports: ["${IT_PORT_FEDERATION:-8628}:8000"]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
  verification:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: services/verification/Dockerfile
    ports: ["${IT_PORT_VERIFICATION:-8617}:8617"]
    env_file: .env
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8617/healthz"]
      interval: 15s
      timeout: 10s
      retries: 5
    restart: unless-stopped
  ops-controller:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: services/ops-controller/Dockerfile
    image: infoterminal/ops-controller:0.1
    ports: ["${IT_PORT_OPS_CONTROLLER:-8614}:8000"]
    environment:
      - IT_OPS_ENABLE=${IT_OPS_ENABLE:-1}
      - IT_OPS_MODE=${IT_OPS_MODE:-docker}
      - IT_DOCKER_SOCKET=${IT_DOCKER_SOCKET:-/var/run/docker.sock}
      - IT_OPS_COMPOSE_BIN=${IT_OPS_COMPOSE_BIN:-docker compose}
      - IT_OPS_STACKS_FILE=${IT_OPS_STACKS_FILE:-infra/ops/stacks.yaml}
      - IT_OPS_LOG_TAIL_LINES=${IT_OPS_LOG_TAIL_LINES:-300}
      - IT_OPS_LOCK_TIMEOUT_SEC=${IT_OPS_LOCK_TIMEOUT_SEC:-120}
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
      interval: 15s
      timeout: 5s
      retries: 5
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/workspace:ro
    restart: unless-stopped
  media-forensics:
    <<: *runtime_defaults
    build:
      context: .
      dockerfile: services/media-forensics/Dockerfile
    ports: ["${IT_PORT_MEDIA_FORENSICS:-8618}:8000"]
    env_file: .env
    environment:
      - MEDIA_MAX_FILE_SIZE=${MEDIA_MAX_FILE_SIZE:-52428800}
      - REVERSE_SEARCH_ENABLED=${REVERSE_SEARCH_ENABLED:-0}
      - BING_SEARCH_API_KEY=${BING_SEARCH_API_KEY:-}
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
      interval: 15s
      timeout: 10s
      retries: 5
    restart: unless-stopped
  # Optional modules --------------------------------------------------
  aleph:
    profiles: ["aleph"]
    <<: *runtime_defaults
    image: alephdata/aleph:latest
    environment:
      - ALEPH_DEBUG=true
    ports:
      - "${IT_PORT_ALEPH:-8641}:8080"
  superset:
    profiles: ["superset"]
    <<: *runtime_defaults
    image: apache/superset:latest
    ports:
      - "${IT_PORT_SUPERSET:-8644}:8088"
  airflow:
    profiles: ["airflow"]
    <<: *runtime_defaults
    image: apache/airflow:2
    ports:
      - "${IT_PORT_AIRFLOW:-8642}:8080"
  nifi:
    profiles: ["nifi"]
    <<: *runtime_defaults
    image: apache/nifi:2.0.0
    environment:
      - NIFI_WEB_HTTPS_PORT=
      - NIFI_WEB_HTTP_PORT=8080
    ports:
      - "${IT_PORT_NIFI:-8619}:8080"
volumes:
  opensearch_data:
  neo4j_data:
  postgres_data:
  demo_data:
  plugin_results:

networks:
  default:
    name: infoterminal_internal
    internal: true
  egress:
    name: infoterminal_egress
