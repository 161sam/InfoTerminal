services:
  search-api:
    build: ./services/search-api
    ports: ["${IT_PORT_SEARCH_API:-8611}:8080"]
    env_file: .env
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8001/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
    depends_on:
      opensearch:
        condition: service_healthy
  graph-api:
    build: ./services/graph-api
    ports: ["${IT_PORT_GRAPH_API:-8612}:8080"]
    env_file: .env
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8002/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
    depends_on:
      neo4j:
        condition: service_healthy
  graph-views:
    build: ./services/graph-views
    env_file: .env
    environment:
      - IT_ENABLE_METRICS=${IT_ENABLE_METRICS:-0}
      - IT_OTEL=${IT_OTEL:-0}
    volumes:
      - ${GEO_UPLOAD_DIR:-./data/geo}:${GEO_UPLOAD_DIR:-/data/geo}
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
    depends_on:
      postgres:
        condition: service_healthy
  web:
    build: ./apps/frontend
    ports: ["${IT_PORT_FRONTEND:-3411}:3000"]
    env_file: .env
    depends_on:
      search-api:
        condition: service_healthy
      graph-api:
        condition: service_healthy
  opensearch:
    image: opensearchproject/opensearch:2
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m # adjust memory
    ports: ["9200:9200"]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:9200/_cluster/health"]
      interval: 15s
      timeout: 5s
      retries: 20
    volumes:
      - opensearch_data:/usr/share/opensearch/data
  neo4j:
    image: neo4j:5
    environment:
      - NEO4J_AUTH=neo4j/neo4j
      - NEO4J_dbms_memory_pagecache_size=256M # tune for production
      - NEO4J_server_memory_heap_initial__size=512m
      - NEO4J_server_memory_heap_max__size=512m
    ports: ['8744:7474', '8743:7473', '8767:7687']
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:7474"]
      interval: 15s
      timeout: 5s
      retries: 20
    volumes:
      - neo4j_data:/data
  postgres:
    image: postgres:16
    environment:
      - POSTGRES_USER=it_user
      - POSTGRES_PASSWORD=it_pass
      - POSTGRES_DB=it_graph
    ports: ['5432:5432']
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB']
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql/data
  doc-entities:
    build: ./services/doc-entities
    ports: ["${IT_PORT_DOC_ENTITIES:-8613}:8000"]
    env_file: .env
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 3s
      retries: 10
    depends_on:
      postgres:
        condition: service_healthy
  ops-controller:
    build:
      context: ./services/ops-controller
    image: infoterminal/ops-controller:0.1
    ports: ["${IT_PORT_OPS_CONTROLLER:-8614}:8000"]
    environment:
      - IT_OPS_ENABLE=${IT_OPS_ENABLE:-1}
      - IT_OPS_MODE=${IT_OPS_MODE:-docker}
      - IT_DOCKER_SOCKET=${IT_DOCKER_SOCKET:-/var/run/docker.sock}
      - IT_OPS_COMPOSE_BIN=${IT_OPS_COMPOSE_BIN:-docker compose}
      - IT_OPS_STACKS_FILE=${IT_OPS_STACKS_FILE:-infra/ops/stacks.yaml}
      - IT_OPS_LOG_TAIL_LINES=${IT_OPS_LOG_TAIL_LINES:-300}
      - IT_OPS_LOCK_TIMEOUT_SEC=${IT_OPS_LOCK_TIMEOUT_SEC:-120}
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/ops/stacks"]
      interval: 15s
      timeout: 5s
      retries: 5
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/workspace:ro
    networks:
      - default
    restart: unless-stopped
  # Optional modules --------------------------------------------------
  aleph:
    profiles: ["aleph"]
    image: alephdata/aleph:latest
    ports: ['8613:8082', '8613:8080']
  superset:
    profiles: ["superset"]
    image: apache/superset:latest
    ports: ['8644:8088']
  airflow:
    profiles: ["airflow"]
    image: apache/airflow:2
    ports: ["8084:8080"]
  nifi:
    profiles: ["nifi"]
    image: apache/nifi:1.24.0
    ports: ["8085:8080"]
volumes:
  opensearch_data:
  neo4j_data:
  postgres_data:
  demo_data:
